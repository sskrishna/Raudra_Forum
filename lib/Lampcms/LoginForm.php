<?php
/**
 *
 * License, TERMS and CONDITIONS
 *
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * Please read the license here : http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * ATTRIBUTION REQUIRED
 * 4. All web pages generated by the use of this software, or at least
 *       the page that lists the recent questions (usually home page) must include
 *    a link to the http://www.lampcms.com and text of the link must indicate that
 *    the website\'s Questions/Answers functionality is powered by lampcms.com
 *    An example of acceptable link would be "Powered by <a href="http://www.lampcms.com">LampCMS</a>"
 *    The location of the link is not important, it can be in the footer of the page
 *    but it must not be hidden by style attributes
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE FREEBSD PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This product includes GeoLite data created by MaxMind,
 *  available from http://www.maxmind.com/
 *
 *
 * @author     Dmitri Snytkine <cms@lampcms.com>
 * @copyright  2005-2012 (or current year) Dmitri Snytkine
 * @license    http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * @link       http://www.lampcms.com   Lampcms.com project
 * @version    Release: 0.2.45
 *
 *
 */


namespace Lampcms;

/**
 * Static class that holds html vsprintf-based
 * templates for generating login form
 * and its components
 */
class LoginForm
{


    protected static function forMember(Registry $Registry)
    {
        if (empty($_SESSION['welcome'])) {

            $oViewer     = $Registry->Viewer;
            $invite      = self::makeInviteLink($oViewer);
            $url         = $oViewer->getProfileUrl();
            $avatar      = $oViewer->getAvatarImgSrc();
            $displayName = $oViewer->getDisplayName();

            $a = array(
                $avatar,
                $displayName,
                '@@Logout@@',
                $invite,
                'settings' => '@@Settings@@',
                'url'      => $url
            );

            $_SESSION['welcome'] = \tplWelcome::parse($a, false);

        } else {
            d('Welcome menu already existed! ');
        }

        return $_SESSION['welcome'];
    }


    /**
     * Make contents of login or welcome
     * block, depending on status of user
     *
     * @param Registry $Registry
     *
     * @return html of the Welcome or Login Block
     * that will be shown on top of page (in header)
     */
    public static function makeWelcomeMenu(Registry $Registry)
    {

        if ($Registry->Viewer->isGuest()) {
            d('going to make login form');

            return self::forGuest($Registry);
        } else {
            return self::forMember($Registry);
        }
    }


    /**
     * Make html for guest user
     * it will consist of login form
     * and another div with welcome guest message
     * and signup buttons
     *
     *
     * @param Registry $Registry
     *
     * @return string html
     */
    protected static function forGuest(Registry $Registry)
    {

        if (empty($_SESSION['guest_block']) || !empty($_SESSION['login_error'])) {

            $html = '';

            $html = self::makeLoginBlock($Registry) . self::makeWelcomeGuest($Registry);
            /**
             * If !empty($_SESSION['login_error']) is set
             * then don't store the login form in session
             * and just return it.
             * Otherwise the form with the login error
             * message will be cached and will be passed from
             * page to page even if user not trying to login again
             *
             * In this case we unset login error from session
             * so it will not be reused on next page
             * and just return login form, so login
             * form is not caches in session and login error
             * is only show this one time!
             */
            if (!empty($_SESSION['login_error'])) {
                unset($_SESSION['login_error']);

                return $html;
            }

            $_SESSION['guest_block'] = $html;
        }

        return $_SESSION['guest_block'];
    }


    /**
     *
     * Generates login form and stores it in SESSION for caching
     * if login form already exists in SESSION then use it and skip
     * creation of html part
     *
     * @param Registry $Registry
     *
     * @return string html fragment containing div with login Form
     * and buttons for external login providers like facebook
     */
    protected static function makeWelcomeGuest(Registry $Registry)
    {

        if (empty($_SESSION['welcome_guest'])) {

            $socialBtns = self::makeSocialButtons($Registry);

            if (!empty($socialBtns)) {
                $socialBtns = '<div class="fl" id="socialbtns"><span>@@Or Join with@@ </span>' . $socialBtns . '</div>';
            }

            $html = \tplWelcomeGuest::parse(array($socialBtns), false);

            $_SESSION['welcome_guest'] = $html;
        }

        return $_SESSION['welcome_guest'];
    }


    /**
     * Make html with buttons of external signup
     * providers
     *
     *
     * @param Registry $Registry
     *
     * @return string html
     */
    public static function makeSocialButtons(Registry $Registry)
    {
        if (true || empty($_SESSION['social_buttons'])) {
            $Ini           = $Registry->Ini;
            $socialBtns    = '';


            /**
             * Facebook
             */
            if (\extension_loaded('curl') && isset($Ini->FACEBOOK)) {
                $aFB = $Ini['FACEBOOK'];

                if (!empty($aFB['APP_ID'])) {
                    d('$aFB: ' . \json_encode($aFB));
                    $socialBtns .= '<img class="ajax fbsignup hand ttt" src="{_IMAGE_SITE_}{_DIR_}/images/f_32.png" width="32" height="32" alt="F" title="@@Sign in with your Facebook account@@">';

                }
            }

            /**
             * Twitter
             */
            if (\extension_loaded('oauth') && isset($Ini->TWITTER)) {
                $aTW = $Ini['TWITTER'];
                if (!empty($aTW['TWITTER_OAUTH_KEY']) && !empty($aTW['TWITTER_OAUTH_SECRET'])) {
                    d('$aTW: ' . \json_encode($aTW));
                    $socialBtns .= '<img class="ajax twsignin hand ttt" src="{_IMAGE_SITE_}{_DIR_}/images/t_32.png" width="32" height="32" alt="T" title="@@Sign in with Twitter Account@@">';
                }
            }


            /**
             * LinkedIn
             */
            if (\extension_loaded('oauth') && isset($Ini->LINKEDIN)) {
                $aLI = $Ini['LINKEDIN'];
                if (!empty($aLI['OAUTH_KEY']) && !empty($aLI['OAUTH_SECRET'])) {
                    d('$aLI: ' . \json_encode($aLI));
                    $socialBtns .= '<img class="ajax add_linkedin hand ttt" src="{_IMAGE_SITE_}{_DIR_}/images/linkedin_32.png" width="32" height="32" alt="T" title="@@Sign in with LinkedIn Account@@">';
                }
            }


            /**
             * Google
             */
            if (\extension_loaded('curl') && \Lampcms\Curl::hasSSL() && isset($Ini->GOOGLE_API)) {
                $aGoogle = $Ini['GOOGLE_API'];

                if (!empty($aGoogle['CLIENT_ID']) && !empty($aGoogle['CLIENT_SECRET'])) {
                    d('$aGoogle: ' . \json_encode($aGoogle));
                    $socialBtns .= '<img class="ajax googlelogin hand ttt" src="{_IMAGE_SITE_}{_DIR_}/images/google_32.png" width="32" height="32" alt="F" title="@@Sign in with your Google account@@">';

                }
            }


            $_SESSION['social_buttons'] = $socialBtns;
        }

        return $_SESSION['social_buttons'];
    }


    /**
     * Make div with login form
     * If login_error exists in session
     * it will also add that error to the form
     *
     * @param Registry $Registry
     *
     * @return string html
     */
    protected static function makeLoginBlock(Registry $Registry)
    {
        $error = (!empty($_SESSION['login_error'])) ? $_SESSION['login_error'] : '';
        d('$error: ' . $error);

        $aVals = array(
            $error
        );

        return \tplLoginform::parse($aVals, false);
    }


    /**
     * Make extra links like 'Invite Friends' based
     * on what type of user is currently logged in
     *
     * @param User $User
     *
     * @return string HTML string for links
     */
    protected static function makeInviteLink(User $User)
    {
        switch ( true ) {

            case ($User instanceof UserFacebook):
                d('cp');
                $ret = '<div class="gfclinks"><a href="#" class="ajax" id="fbinvite" title="I\'ve registered at this site, and think you will enjoy your stay here too! Please check it out!">@@Invite your facebook friends@@</a></div>';
                break;

            case ($User instanceof UserTwitter):
                d('cp');
                $ret = '<div class="gfclinks"><a href="#" class="ajax" id="twinvite" title="Hey everyone! Join me at this site (Use the *Sign in with Twitter* button) ">@@Invite your Twitter friends@@</a></div>';
                break;
            default:
                d('cp');
                $ret = '';
        }

        return $ret;
    }

}
