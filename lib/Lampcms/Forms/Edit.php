<?php
/**
 *
 * License, TERMS and CONDITIONS
 *
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * Please read the license here : http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * ATTRIBUTION REQUIRED
 * 4. All web pages generated by the use of this software, or at least
 *       the page that lists the recent questions (usually home page) must include
 *    a link to the http://www.lampcms.com and text of the link must indicate that
 *    the website\'s Questions/Answers functionality is powered by lampcms.com
 *    An example of acceptable link would be "Powered by <a href="http://www.lampcms.com">LampCMS</a>"
 *    The location of the link is not important, it can be in the footer of the page
 *    but it must not be hidden by style attributes
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE FREEBSD PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This product includes GeoLite data created by MaxMind,
 *  available from http://www.maxmind.com/
 *
 *
 * @author     Dmitri Snytkine <cms@lampcms.com>
 * @copyright  2005-2012 (or current year) Dmitri Snytkine
 * @license    http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * @link       http://www.lampcms.com   Lampcms.com project
 * @version    Release: 0.2.45
 *
 *
 */


namespace Lampcms\Forms;

use Lampcms\Category\Renderer;

/**
 * Class responsible
 * for processing the "Ask" form
 *
 *
 * @author Dmitri Snytkine
 *
 */
class Edit extends Form
{

    /**
     * Name of form template file
     * The name of actual template should be
     * set in sub-class.
     *
     * @var string
     */
    protected $template = 'tplFormedit';

    protected $selected = 0;

    protected $isAnswer = false;

    /**
     * @param \Lampcms\Registry $R
     * @param int               $selected the category id. This only applies to Question
     * @param bool              $isAnswer if true then this edit form is for the Answer
     *                                    otherwise the form is for the question
     */
    public function __construct(\Lampcms\Registry $R, $selected = 0, $isAnswer = false)
    {
        $this->selected = $selected;
        $this->isAnswer = $isAnswer;

        parent::__construct($R);
    }


    protected function init()
    {
        /**
         * Skip this for when editing Answer
         * this init adds categories drop-down
         * menu and it is only used for Question.
         */
        if (!$this->isAnswer) {
            $selectMenu = $clabel = $crequired = null;
            /**
             * Check if category is
             * optional/required/none
             * If required then add 3rd param 'true'
             * also set "Select Category" only
             * If selected is not passed here
             */
            $categs = $this->Registry->Ini->CATEGORIES;

            if ($categs) {
                $Menu   = new Renderer($this->Registry);
                $clabel = '@@Select Category@@';
                /**
                 * If CATEGORIES in !config.ini is set to 2
                 * then category selection is required.
                 * Adding validator server-side
                 * and HTML5 'required' tag client-side
                 */
                if (2 == $categs) {
                    $crequired = true;
                    $err       = '@@You must select a category@@';
                    $this->addValidator('category', function ($val) use ($err) {

                        if (strlen($val) < 1) {
                            return $err;
                        }

                        return true;
                    });
                }

                $selectMenu = $Menu->getSelectMenu($this->selected, $clabel, $crequired);
                d('$selectMenu: ' . $selectMenu);
            }

            $this->setVar('category_menu', $selectMenu);
            if (0 === strlen($categs)) {
                $this->setVar('category_class', 'hide');
            } else {
                $this->setVar('category_class', 'category');
            }
        }
    }

    /**
     * Concrete form validator for this form
     * (non-PHPdoc)
     *
     * @see Form::doValidate()
     */
    protected function doValidate()
    {
        $this->validateBody()->validateReason();
    }


    protected function validateBody()
    {
        $body = $this->Registry->Request['qbody'];
        if (strlen($body) < 10) {
            $this->setError('qbody', 'Question must contain at least 10 letters');
        }

        $aWords = explode(' ', $body);
        if (count($aWords) < 3) {
            $this->setError('qbody', 'Question must contain at least 3 words');
        }

        return $this;
    }


    protected function validateReason()
    {
        $s = $this->Registry->Request->get('reason', 's', '');
        $s = \trim($s);
        if (empty($s)) {
            $this->setError('reason', '@@You must include reason for editing@@');
        }

        return $this;
    }

}
