<?php
/**
 *
 * License, TERMS and CONDITIONS
 *
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * Please read the license here : http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * ATTRIBUTION REQUIRED
 * 4. All web pages generated by the use of this software, or at least
 *       the page that lists the recent questions (usually home page) must include
 *    a link to the http://www.lampcms.com and text of the link must indicate that
 *    the website\'s Questions/Answers functionality is powered by lampcms.com
 *    An example of acceptable link would be "Powered by <a href="http://www.lampcms.com">LampCMS</a>"
 *    The location of the link is not important, it can be in the footer of the page
 *    but it must not be hidden by style attributes
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE FREEBSD PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This product includes GeoLite data created by MaxMind,
 *  available from http://www.maxmind.com/
 *
 *
 * @author     Dmitri Snytkine
 * @copyright  2005-2012 (or current year) Dmitri Snytkine
 * @license    http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * @link       http://www.lampcms.com   Lampcms.com project
 * @version    Release: 0.2.45
 *
 *
 */

namespace Lampcms\Uri;

use Lampcms\Utf8String;

/**
 * Static class for extracting URI string from
 * the request uri
 * This class is based in no small part on work done by CodeIgniter framework
 *
 */
class UriString
{

    /**
     * Request URI string
     * Sanitized (low chars removed)
     *
     * @var string
     */
    protected static $uri;

    /**
     * Not used currently.
     * The idea was to extract any additional query string
     * for example if url is /questions/102/page4.html?tag=mytag
     * then queryString would be set to tag=mytag
     * This feature is not currently implemented
     *
     * @var string
     */
    protected static $queryString = '';

    /**
     * Getter for self::$uri uri string
     *
     * @static
     * @return string
     */
    public static function getUriString()
    {
        if (!isset(self::$uri)) {
            static::init();
        }

        return (string)(self::$uri);
    }

    /**
     * Get the URI String from server request
     * and set it as $this->uri
     *
     * @return void
     */
    public static function init()
    {

        // Let's try the REQUEST_URI first, this will work in most situations
        if ($uri = static::detectUri()) {
            static::setUriString($uri);
            return;
        }

        // Is there a PATH_INFO variable?
        // Note: some servers seem to have trouble with getenv() so we'll test it two ways
        $path = (isset($_SERVER['PATH_INFO'])) ? $_SERVER['PATH_INFO'] : @getenv('PATH_INFO');
        if (\trim($path, '/') != '' && $path !== '/' . INDEX_FILE) {
            static::setUriString($path);
            return;
        }

        // No PATH_INFO?... What about QUERY_STRING?
        $path = (isset($_SERVER['QUERY_STRING'])) ? $_SERVER['QUERY_STRING'] : @getenv('QUERY_STRING');
        if (\trim($path, '/') != '') {
            static::setUriString($path);
            return;
        }

        // As a last ditch effort lets try using the $_GET array
        if (\is_array($_GET) && \count($_GET) === 1 && \trim(key($_GET), '/') != '') {
            static::setUriString(key($_GET));
            return;
        }

        return;
    }


    /**
     * Set the URI String
     *
     * @param     string
     *
     * @return    string
     */
    public static function setUriString($str)
    {
        $str = Utf8String::stripLow($str);

        self::$uri = ($str === '/') ? '' : $str;

        return self::$uri;
    }


    /**
     * Detects the URI
     *
     * This function is borrowed from CodeIgniter
     *
     * This function will detect the URI automatically and fix the query string
     * if necessary.
     *
     * @return    string
     */
    public static function detectUri()
    {
        if (!isset($_SERVER['REQUEST_URI'], $_SERVER['SCRIPT_NAME'])) {
            return '';
        }

        $uri = $_SERVER['REQUEST_URI'];
        if (!empty($_SERVER['SCRIPT_NAME'])) {
            if (0 === \strpos($uri, $_SERVER['SCRIPT_NAME'])) {
                $uri = \substr($uri, strlen($_SERVER['SCRIPT_NAME']));
            }
            elseif (strpos($uri, \dirname($_SERVER['SCRIPT_NAME'])) === 0) {
                $uri = \substr($uri, \strlen(dirname($_SERVER['SCRIPT_NAME'])));
            }
        }

        // This section ensures that even on servers that require the URI to be in the query string (Nginx) a correct
        // URI is found, and also fixes the QUERY_STRING server var and $_GET array.
        if (\strncmp($uri, '?/', 2) === 0) {
            $uri = \substr($uri, 2);
        }
        $parts = \preg_split('#\?#i', $uri, 2);
        $uri   = $parts[0];
        if (isset($parts[1])) {
            $_SERVER['QUERY_STRING'] = $parts[1];
            \parse_str($_SERVER['QUERY_STRING'], $_GET);
        }
        else {
            $_SERVER['QUERY_STRING'] = '';
            $_GET                    = array();
        }

        if ($uri == '/' || empty($uri)) {
            return '/';
        }

        $uri = \parse_url($uri, PHP_URL_PATH);

        return \str_replace(array('//', '../'), '/', \trim($uri, '/'));
    }
}
