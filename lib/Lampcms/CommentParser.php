<?php
/**
 *
 * License, TERMS and CONDITIONS
 *
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * Please read the license here : http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * ATTRIBUTION REQUIRED
 * 4. All web pages generated by the use of this software, or at least
 *       the page that lists the recent questions (usually home page) must include
 *    a link to the http://www.lampcms.com and text of the link must indicate that
 *    the website\'s Questions/Answers functionality is powered by lampcms.com
 *    An example of acceptable link would be "Powered by <a href="http://www.lampcms.com">LampCMS</a>"
 *    The location of the link is not important, it can be in the footer of the page
 *    but it must not be hidden by style attributes
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE FREEBSD PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This product includes GeoLite data created by MaxMind,
 *  available from http://www.maxmind.com/
 *
 *
 * @author     Dmitri Snytkine <cms@lampcms.com>
 * @copyright  2005-2012 (or current year) Dmitri Snytkine
 * @license    http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * @link       http://www.lampcms.com   Lampcms.com project
 * @version    Release: 0.2.45
 *
 *
 */


namespace Lampcms;

use Lampcms\Interfaces\LampcmsResource;

/**
 *
 * This class is used for
 * adding or deleting a comment
 * as well as to modifying (editing)
 * the comment
 *
 * @todo   finish deleting and modifying methods
 *
 * @author Dmitri Snytkine
 *
 */
class CommentParser extends LampcmsObject
{

    /**
     * Resource for which this comment
     * is being processed
     * this will be either \Lampcms\Answer
     * or \Lampcms\Question
     * object
     *
     * @var object of type Lampcms\Answer
     * or \Lampcms\Question but will implement Lampcms\LampcmsObject
     */
    protected $Resource = null;

    /**
     * Array of data for this one comment
     *
     * @var array
     */
    protected $aComment;

    /**
     * Array of one row in
     * either QUESTIONS or ANSWERS collection
     * The $this->Resource is created from this array
     *
     * @var array
     */
    protected $aResource;

    /**
     * Flag indicates that comment has been deleted
     *
     * @var bool
     */
    protected $bDeleted;

    /**
     * Object of SubmittedComment
     * usually this is SubmittedCommentWWW object
     * but could be any object implementing
     * \Lampcms\Interfaces\SubmittedComment
     *
     * @var object implementing \Lampcms\Interfaces\SubmittedComment
     */
    protected $Comment;


    public function __construct(Registry $Registry)
    {
        $this->Registry = $Registry;
    }


    public function getArrayCopy()
    {
        if (empty($this->aComment) || empty($this->aComment['_id'])) {
            throw new \LogicException('The comment data has not been set yet');
        }

        return $this->aComment;
    }


    /**
     * Update i_lm_ts value
     * as well as update i_lm_ts in affected
     * Question
     * This method will be used when
     * comment is edited
     *
     * @throws \LogicException
     * @return \Lampcms\CommentParser
     */
    public function touch()
    {
        if (empty($this->aComment) || empty($this->aComment['_id'])) {
            throw new \LogicException('The comment data has not been set yet');
        }

        $this->aComment['i_lm_ts'] = time();
        $this->touchQuestion();

        return $this;
    }


    /**
     * Process submitted comment
     * and add it to Resource
     * and also insert meta data into COMMENTS collection
     * meta includes id, resourceID, questionID, parentID,
     * collection name
     *
     * @todo limit length of body to about 600 chars of plain text
     *
     * @param \Lampcms\Interfaces\SubmittedComment $Comment
     *
     * @throws AlertException
     * @return \Lampcms\CommentParser
     */
    public function add(\Lampcms\Interfaces\SubmittedComment $Comment)
    {

        $this->Comment  = $Comment;
        $this->Resource = $this->Comment->getResource();
        $this->checkCommentsLimit();

        $Commentor = $this->Comment->getUserObject();
        $res_id    = $this->Resource->getResourceId();
        $Body      = $this->Comment->getBody();
        $this->validateBody($Body);

        $body = $Body->valueOf();
        $uid  = $this->Comment->getOwnerId();

        $this->aComment['_id']      = $this->Comment->getResourceId();
        $this->aComment['i_res']    = $res_id;
        $this->aComment['i_qid']    = $this->Comment->getQuestionId();
        $this->aComment['b']        = $body;
        $this->aComment['username'] = $Commentor->getDisplayName();
        $this->aComment['ip']       = $this->Comment->getIP();
        $this->aComment['i_uid']    = $uid;
        $this->aComment['i_prnt']   = $this->Comment->getParentId();
        $this->aComment['coll']     = $this->Comment->getCollectionName();
        $this->aComment['hash']     = hash('md5', $uid . $res_id . $body);
        $this->aComment['i_ts']     = time();
        $this->aComment['ts']       = date('r');
        $this->aComment['t']        = date('M j \'y \a\\t G:i'); // must escape t with 2 backslashes because \t means tab
        $this->aComment['avtr']     = $Commentor->getAvatarSrc();


        /**
         * If comment is made by the same user as Question owner
         * we must add special flag so that
         * later in template we can add special css class
         * to indicate commentor is also question asker
         */
        if ($uid == $this->Resource->getQuestionOwnerId()) {
            $this->aComment['b_owner'] = true;
        }

        $aParent = null;

        /**
         * In case this is a reply to a comment
         * get array of parent comment
         * and create s_inreply span element
         * and also add 'inreplyto' key to this comment array
         * inreplyto is the username of parent comment
         */
        if (!empty($this->aComment['i_prnt']) && (false !== $aParent = $this->Resource->getComment((int)$this->aComment['i_prnt']))) {
            $reply = sprintf('<span id="replyto_%s" class="inreply mo ajax">@%s</span>', $this->aComment['i_prnt'], $aParent['username']);

            /**
             * inreply_uid is userID of parent comment author
             * it is needed by observer(s)
             * in order to notify the parent comment
             * owner about a reply!
             *
             */
            $this->aComment['inreply_uid'] = $aParent['i_uid'];
            $this->aComment['inreplyto']   = $aParent['username'];
            /**
             * 's_inreply' is an html fragment
             * used on web page so that
             * it's not necessary to do any parsing
             * in template
             */
            $this->aComment['s_inreply'] = $reply;

            /**
             * parent_body is the body of the parent comment
             * for which this is a reply
             * This is needed by the EmailNotifier
             * in order to include the original
             * body in the email notifications
             * so that a user will have a good idea
             * for which comment the new reply was added
             *
             */

            $this->aComment['parent_body'] = $aParent['b'];
        }

        /**
         * Submitted comment object may provide
         * extra data, for example Geo Location data
         * and possibly name and url of API client
         * that was used for submitting comment
         * We add extra data to array here
         */
        $aGeo = $this->Comment->getExtraData();
        d('aGeo: ' . print_r($aGeo, 1));
        if (!empty($aGeo)) {
            d('have geo data');
            $this->aComment = \array_merge($this->aComment, $aGeo);
        }

        /**
         * If country code cc was not added then
         * just add empty string, so that
         * we can still use the value of cc
         * To add flag icons
         */
        if (!array_key_exists('cc', $this->aComment)) {
            $this->aComment['cc'] = '';
        }

        d('$aComment ' . \json_encode($this->aComment));

        $this->Registry->Dispatcher->post($this->Comment, 'onBeforeNewComment', $this->aComment);

        $coll = $this->Registry->Mongo->COMMENTS;
        $coll->ensureIndex(array('hash' => 1), array('unique' => true));
        $coll->ensureIndex(array('i_uid' => 1));


        try {
            /**
             * Remove unnecessary elements from $this->aComment array
             * and keep only the the keys we need in COMMENTS collection
             */
            $aKeys = array('_id', 'hash', 'i_res', 'i_qid', 'i_uid', 'ip', 'i_ts', 'i_prnt', 'coll');
            $aData = \array_intersect_key($this->aComment, \array_flip($aKeys));
            $coll->insert($aData, array('fsync' => true));
        } catch ( \MongoException $e ) {
            d('unable to created record in COMMENTS collection ' . $e->getMessage() . ' code: ' . $e->getCode());

            throw new AlertException('@@It looks like you have already posted this comment@@');
        }

        $this->Resource->addComment($this);
        $this->followQuestion();
        $this->touchQuestion();
        $this->Resource->touch()->save();

        $this->Registry->Dispatcher->post($this->Comment, 'onNewComment', $this->aComment);

        return $this;
    }


    /**
     * Enforce min and max length of comment
     *
     *
     * @param Utf8String $Body
     *
     * @throws AlertException
     * @return \Lampcms\CommentParser
     */
    protected function validateBody(Utf8String $Body)
    {
        $minChars = $this->Registry->Ini->MIN_COMMENT_CHARS;
        $maxChars = $this->Registry->Ini->MAX_COMMENT_CHARS;

        $len    = $Body->length();
        if ($len < $minChars) {

            throw new AlertException('@@Comment is too short. Minimal length is@@'.' '.$minChars);
        }

        if ($len > $maxChars) {
            throw new AlertException('@@Comment is too long. Maximum number of characters is@@ '.$maxChars);
        }

        return $this;
    }


    /**
     * Comment author will automatically
     * start following this question
     * but only if comment is for a question
     * not if it's for an answer
     *
     * @return object $this
     */
    protected function followQuestion()
    {
        d('cp');
        if ($this->Resource instanceof \Lampcms\Question) {
            $FollowManager = new FollowManager($this->Registry);
            $FollowManager->followQuestion($this->Registry->Viewer, $this->Resource);
        }

        return $this;
    }


    /**
     * Usually there is a limit to how many comments an item
     * can have. This is to prevent run-away discussion
     *
     * @throws AlertException
     * @return object $this
     *
     */
    protected function checkCommentsLimit()
    {
        if (0 !== $limit = (int)$this->Registry->Ini->MAX_COMMENTS) {
            if ($this->Resource->getCommentsCount() > $limit) {
                throw new AlertException('Unable to add comment because the limit of ' . $limit . ' comments per item has been reached.<br>Consider adding another answer instead');
            }
        } else {
            throw new AlertException('@@Comments feature has been disabled by administrator@@');
        }

        return $this;
    }


    /**
     *
     * Process edited comment
     * It will: get comment record from COMMENTS
     * check that comment is not older than 5 minutes (in !config.ini)
     * Check permission IF $uid is passed here
     *
     * Get Resource, replace the value of 'b'
     * in the corresponding comment,
     * add editor and i_editor values IF edits not by owner
     * add edit_ts value of date/time
     *
     * updates COMMENTS collection with i_edit_ts value
     *
     * touchQuestion()
     *
     * @todo check timeDiff, post onBefore and onEdit events
     *
     * @todo Update COMMENTS collection
     *
     * @todo better permissions check. Right now deleted or suspender
     *       user may be able to edit own comment is this OK?
     *
     * @param \Lampcms\Interfaces\SubmittedComment $Comment
     * @param mixed (int|null)                     $viewerID userID of editor IF NOT by moderator
     *                                                       so that we can check the ownership of comment here
     *
     * @return object $this
     */
    public function edit(\Lampcms\Interfaces\SubmittedComment $Comment, $viewerID = null)
    {
        $this->Comment = $Comment;
        $id            = $Comment->getResourceId();

        $this->findCommentRecord($id)
            ->checkIsOwner($viewerID)
            ->getResourceArray()
            ->checkEditTimeout($viewerID)
            ->makeResourceObject();


        $Body = $Comment->getBody();
        $this->validateBody($Body);

        $aComments = $this->Resource->getComments();
        $bEdited   = false;
        if (!empty($aComments)) {
            for ($i = 0; $i < count($aComments); $i += 1) {
                if ($aComments[$i]['_id'] == $id) {
                    $oEditor    = $this->Comment->getUserObject();
                    $date       = date('r');
                    $editor     = $oEditor->getDisplayName();
                    $editor_url = $oEditor->getProfileUrl();
                    $uid        = $oEditor->getUid();

                    d('comment found: ' . $i);
                    $aComments[$i]['b'] = $Body->valueOf();
                    $aComments[$i]['e'] = '<a class="ce" href="' . $editor_url . '"><span class="ico edited tu" title="@@This comment was edited by@@ ' . $editor . ' on ' . $date . '"></span></a>';
                    $bEdited            = true;
                    break;
                }
            }
        }

        /**
         * Need to add 'b' and 'username' and 'hts' and 't'
         * to $this->aComment.
         * This values are needed by template
         * These values are present only inside
         * the comment array in Resource and not
         * in the COMMENTS collection, so we need
         * to merge these now so that the result array
         * will have all required values
         *
         */
        $this->aComment = \array_merge($this->aComment, $aComments[$i]);
        $this->Registry->Dispatcher->post($this->Resource, 'onBeforeCommentEdit', $aComments[$i]);

        if ($bEdited) {
            d('changes made');
            $this->Registry->Mongo->COMMENTS->update(array('_id' => $id),
                array('$set' => array('i_lm_ts' => time(), 'i_editor' => $viewerID)));

            $this->Resource->setComments($aComments);
            $this->touchQuestion();
            $this->Resource->save();
            d('changes saved to resource');
            $this->Registry->Dispatcher->post($this->Resource, 'onCommentEdit', $aComments[$i]);

        }


        return $this;
    }


    protected function checkEditTimeout($viewerID)
    {
        if (null === $viewerID) {
            d('Timeout does not apply to user with edit_comment permission');

            return $this;
        }

        $timeout = $this->Registry->Ini->COMMENT_EDIT_TIME;
        if (empty($timeout)) {
            d('edit timeout disabled in !config.ini');

            return $this;
        }


        if ((time() - $this->aComment['i_ts']) > ($timeout * 60)) {
            throw new AlertException('@@You cannot edit comments that are older than@@ ' . $timeout . ' @@minutes@@');
        }

        return $this;
    }


    /**
     * Update i_lm_ts (Last modified timestamp) of
     * the question that is affected by this comment
     * The Question is affected when comment is
     * added to one of the questions's answer
     * in such case we update i_lm_ts value
     * directly in the QUESTIONS collection
     *
     * If the comment is added to a Question resource
     * then we already have the $this->Resource
     * and can just call touch() on it
     *
     * @return object $this
     */
    protected function touchQuestion()
    {
        // $this->Resource->touch()->save();
        if ($this->Resource instanceof \Lampcms\Question) {
            $this->Resource->touch();
        } elseif ($this->Resource instanceof \Lampcms\Answer) {
            try {
                /**
                 * If the comment is made to the answer
                 * then only update i_etag value in Question
                 * it will not bump the question up
                 * in the home page
                 */
                $this->Registry->Mongo->QUESTIONS
                    ->update(array('_id' => $this->Resource['i_qid']), array('$set' => array('i_etag' => time())));
            } catch ( \MongoException $e ) {
                e('Unable to update question ' . $e->getMessage());
            }
        }

        return $this;
    }


    /**
     *
     * Removes record from COMMENTS
     * and removes comment from array of comments
     * from one resource
     * Posts onBeforeDeleteComment
     * and onDeleteComment events
     *
     * @param     int       id id of comment
     *
     * @param int $viewerID id of Viewer
     *                      If passed then a check is performed to make
     *                      sure that comment is owned by this userID and if not,
     *                      the exception is thrown.
     *                      If it's determined that viewer already has the permission
     *                      to delete a comment then don't pass any value for this param
     *                      and the check of ownership will not be performed
     *
     * @return object $this
     *
     * @throws \Lampcms\Exception if comment not found by id
     * of if resource that this comment belongs to is not found
     */
    public function delete($id, $viewerID = null)
    {
        $id = (int)$id;
        $this->findCommentRecord($id)
            ->checkIsOwner($viewerID)
            ->getResourceArray()
            ->makeResourceObject();

        $this->Registry->Dispatcher->post($this->Resource, 'onBeforeDeleteComment', $this->aComment);

        $this->Registry->Mongo->COMMENTS->remove(array('_id' => $id));

        $this->Resource->deleteComment($id);

        if ((null !== $viewerID) && ($this->Resource instanceof \Lampcms\Question)) {
            d('removing commentor as contributor of a question');
            $this->Resource->removeContributor($viewerID);
        }

        $this->touchQuestion();
        $this->Resource->save();

        $this->Registry->Dispatcher->post($this->Resource, 'onDeleteComment', $this->aComment);

        return $this;
    }


    /**
     * Instantiate resource object
     * from the $this->aResource array
     *
     * @return object $this
     */
    protected function makeResourceObject()
    {

        $class = ('QUESTIONS' === $this->aComment['coll']) ? '\\Lampcms\\Question' : '\\Lampcms\\Answer';

        $this->Resource = new $class($this->Registry, $this->aResource);
        d('$this->Resource: ' . $this->Resource->getClass());

        return $this;
    }


    protected function getResourceArray()
    {
        $this->aResource = $this->Registry->Mongo->getCollection($this->aComment['coll'])
            ->findOne(array('_id' => $this->aComment['i_res']));

        if (empty($this->aResource)) {
            throw new \Lampcms\Exception('@@Commented resource not found@@');
        }

        d('cp');

        return $this;
    }


    /**
     * Check that id of $viewerID param
     * is the id of comment owner (from the COMMENTS i_uid)
     *
     *
     * @param int $viewerID value of userid of Viewer
     *
     * @throws AccessException
     *
     * @return object $this
     */
    protected function checkIsOwner($viewerID)
    {
        d('$viewerID: ' . var_export($viewerID, true));

        if ((null !== $viewerID) && ((int)$viewerID !== $this->aComment['i_uid'])) {
            throw new AccessException('@@Action failed because you are not the author of this comment@@.');
        }

        return $this;
    }


    /**
     * Find and set array of one comment record
     * $this->aComments
     * from the COMMENTS collection
     *
     * @param int $id value of comment id
     *
     * @throws \Lampcms\Exception if record not found
     *
     * @return object $this
     */
    protected function findCommentRecord($id)
    {
        $this->aComment = $this->Registry->Mongo->COMMENTS->findOne(array('_id' => $id));
        if (empty($this->aComment)) {
            throw new \Lampcms\Exception('@@Comment not found@@');
        }

        return $this;
    }


    /**
     * Get Resource from COMMENTS by rid
     * postOnBefore,
     * insert like into VOTES
     * update i_likes in Resource[comments][$i]
     * post onCommentLike
     *
     * @todo this can be done without creating
     *       Resource object by using in-place update
     *       of nested array element right in Mongo
     * @see  http://www.mongodb.org/display/DOCS/Updating#Updating-The%24positionaloperator
     *
     *
     * @param \Lampcms\Interfaces\SubmittedComment $Comment
     *
     * @return \Lampcms\CommentParser
     */
    public function addLike(\Lampcms\Interfaces\SubmittedComment $Comment)
    {
        $this->Comment = $Comment;
        $id            = $Comment->getResourceId();
        d('id: ' . $id);
        $this->Registry->Dispatcher->post($Comment, 'onBeforeCommentLike');

        /**
         * In case of duplicate vote
         * OR vote for own comment
         * the \LogicException will be thrown
         * in which case we just don't record
         * the "Like" but it will not
         * generate any errors to the user
         */
        try {
            $this->findCommentRecord($id)
                ->getResourceArray()
                ->addCommentLike($id)
                ->makeResourceObject();
        } catch ( \LogicException $e ) {
            d($e->getMessage());
            return;
        }

        $bEdited   = false;
        $aComments = $this->Resource->getComments();
        d('$aComments: ' . print_r($aComments, 1));

        if (!empty($aComments)) {
            d('Resource has comments array');
            for ($i = 0; $i < count($aComments); $i += 1) {
                if ($id == $aComments[$i]['_id']) {
                    d('comment found: ' . $i);
                    if (empty($aComments[$i]['i_likes'])) {
                        $aComments[$i]['i_likes'] = 1;
                        d('$aComments[$i][i_likes]: ' . $aComments[$i]['i_likes']);

                    } else {
                        $aComments[$i]['i_likes'] += 1;
                    }

                    $bEdited = true;
                    break;
                }
            }
        }

        if ($bEdited) {
            $this->Resource->setComments($aComments);
            $this->touchQuestion();
            $this->Resource->save();
            d('changes saved to resource');
            $this->Registry->Dispatcher->post($this->Resource, 'onCommentLike', $aComments[$i]);
        }

        return $this;
    }


    /**
     * Insert record into COMMENTS_LIKES collection
     * also serves as a check for duplicate likes
     * since uid,i_res is unique
     *
     * @param $resID
     *
     * @throws \LogicException
     * @internal param int $id id of comment
     *
     * @return object $this
     */
    protected function addCommentLike($resID)
    {

        $uid     = $this->Comment->getUserObject()->getUid();
        $ownerID = $this->aComment['i_uid'];

        if ($uid == $ownerID) {

            throw new \LogicException('@@Likes of own comment do not count@@');
        }

        $coll = $this->Registry->Mongo->getCollection('COMMENTS_LIKES');
        $coll->ensureIndex(array('i_uid' => 1));
        $coll->ensureIndex(array('i_owner' => 1));

        /**
         * The value of _id is composite of userId.resourceId, making
         * it unique to per user per resource, this makes
         * it impossible to "Like" the same resource more than once
         * but the same user
         *
         */
        $id = $uid . '.' . $resID;

        $aData = array(
            '_id'     => $id,
            'i_uid'   => $uid,
            'i_res'   => $resID,
            'i_ts'    => time(),
            'i_owner' => $ownerID
        );

        d('aData: ' . print_r($aData, 1));

        try {
            $coll->insert($aData, array('safe' => true));
        } catch ( \MongoException $e ) {
            d('Unable to add record to COMMENTS_LIKES collection: ' . $e->getMessage());

            throw new \LogicException('@@Duplicate Like detected@@');
        }

        return $this;
    }

}
