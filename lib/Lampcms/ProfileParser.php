<?php
/**
 *
 * License, TERMS and CONDITIONS
 *
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * Please read the license here : http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * ATTRIBUTION REQUIRED
 * 4. All web pages generated by the use of this software, or at least
 *       the page that lists the recent questions (usually home page) must include
 *    a link to the http://www.lampcms.com and text of the link must indicate that
 *    the website\'s Questions/Answers functionality is powered by lampcms.com
 *    An example of acceptable link would be "Powered by <a href="http://www.lampcms.com">LampCMS</a>"
 *    The location of the link is not important, it can be in the footer of the page
 *    but it must not be hidden by style attributes
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE FREEBSD PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This product includes GeoLite data created by MaxMind,
 *  available from http://www.maxmind.com/
 *
 *
 * @author     Dmitri Snytkine <cms@lampcms.com>
 * @copyright  2005-2012 (or current year) Dmitri Snytkine
 * @license    http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * @link       http://www.lampcms.com   Lampcms.com project
 * @version    Release: 0.2.45
 *
 *
 */


namespace Lampcms;

/**
 * Class for parsing the SubmittedProfile
 * which is an object representing data of
 * user profile that was sent to the server from
 * the edit profile interface. Usually this is
 * sent via Edit Profile form on the web
 * but can also be submitted by other means
 * in the future like via API
 *
 *
 * @author Dmitri Snytkine
 *
 */
class ProfileParser extends LampcmsObject
{
    /**
     * User object of user whose profile being updated
     *
     * @var object of type User
     */
    protected $User;


    /**
     * @var object of type SubmittedProfile
     */
    protected $Submitted;


    public function __construct(Registry $Registry)
    {
        $this->Registry = $Registry;
    }

    /**
     *
     * Modify values in User object
     * based on SubmittedProfile
     *
     * @param User $User
     * @param SubmittedProfile $o
     *
     * @return bool true
     */
    public function save(User $User, SubmittedProfile $o)
    {
        $this->User = $User;
        $this->Submitted = $o;

        $User['fn'] = $this->getClean($o->getFirstName())->substr(0, 60)->valueOf();
        $User['mn'] = $this->getClean($o->getMiddleName())->substr(0, 60)->valueOf();
        $User['ln'] = $this->getClean($o->getLastName())->substr(0, 80)->valueOf();
        $User['cc'] = $this->getClean($o->getCountry())->valueOf();
        $User['state'] = $this->getClean($o->getState())->substr(0, 50)->valueOf();
        $User['city'] = $this->getClean($o->getCity())->substr(0, 80)->valueOf();
        $User['url'] = $this->getUrl($this->getClean($o->getUrl()));
        $User['zip'] = $this->getClean($o->getZip())->substr(0, 8)->valueOf();
        $User['dob'] = $this->getDob($o->getDob());
        $User['gender'] = $this->getGender($o->getGender());
        $User['description'] = \wordwrap($this->getClean($o->getDescription())->substr(0, 2000)->valueOf(), 50);
        $User->setTimezone($this->getClean($o->getTimeZone())->valueOf());

        $this->makeAvatar();

        $User->save();

        return true;

    }


    /**
     * Validates Dob string and returns it only if
     * it looks valid, otherwise returns null
     * @param string $string
     * @return mixed string|null null if input does not
     * look like a valid date of birth
     */
    protected function getDob($string)
    {
        return (Validate::validateDob($string)) ? $string : null;

    }


    /**
     * Returns value of "Gender" but only
     * if it's valid, otherwise returns null
     * Enter description here ...
     * @param string $str
     * @return string M or F or empty string
     */
    protected function getGender($str)
    {
        d('gender string: ' . $str);

        return ('M' === $str || 'F' === $str) ? $str : null;
    }


    /**
     * Get value of url
     * append 'http://' if url does not appear
     * to be starting with the http prefix
     * @param Utf8String $str
     * @return string
     */
    protected function getUrl(Utf8String $str)
    {
        $str = $str->trim();
        if ($str->length() < 4) {
            return '';
        }

        $str = $str->substr(0, 250)->trim()->valueOf();
        if ('http' !== \substr($str, 0, 4)) {
            return 'http://' . $str;
        }

        return $str;
    }


    /**
     * Get clean UTF8String object representing
     * trimmed and clean of html tags
     *
     * @param string $string
     * @return object of type UTF8String
     */
    protected function getClean($string)
    {
        if (empty($string)) {
            return Utf8String::stringFactory('', 'ascii', true);
        }

        return Utf8String::stringFactory($string)->trim()->stripTags();
    }


    /**
     * This will create avatar of square size
     * and add path to User['avatar'] IF
     * avatar has been uploaded
     *
     * @return object $this
     */
    protected function makeAvatar()
    {
        AvatarParser::factory($this->Registry)->addAvatar($this->User, $this->Submitted->getUploadedAvatar());

        return $this;
    }

}
