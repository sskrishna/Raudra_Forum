<?php
/**
 *
 * License, TERMS and CONDITIONS
 *
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * Please read the license here : http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * ATTRIBUTION REQUIRED
 * 4. All web pages generated by the use of this software, or at least
 *       the page that lists the recent questions (usually home page) must include
 *    a link to the http://www.lampcms.com and text of the link must indicate that
 *    the website's Questions/Answers functionality is powered by lampcms.com
 *    An example of acceptable link would be "Powered by <a href="http://www.lampcms.com">LampCMS</a>"
 *    The location of the link is not important, it can be in the footer of the page
 *    but it must not be hidden by style attributes
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE FREEBSD PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This product includes GeoLite data created by MaxMind,
 *  available from http://www.maxmind.com/
 *
 *
 * @author     Dmitri Snytkine <cms@lampcms.com>
 * @copyright  2005-2012 (or current year) Dmitri Snytkine
 * @license    http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * @link       http://www.lampcms.com   Lampcms.com project
 * @version    Release: 0.2.45
 *
 *
 */

namespace Lampcms\Controllers;

use \Lampcms\WebPage;
use \Lampcms\User;
use \Lampcms\Mongo\Schema\User as Schema;
use \Lampcms\Acl\Role;

class Activate extends WebPage
{

    /**
     * Object of type User
     * representing the user whose account is being activated
     *
     * @var object of type User
     */
    protected $oActivatedUser;

    /**
     *
     * @var array
     */
    protected $aEmail;

    protected $layoutID = 1;

    /**
     * Maximum number of days after which
     * validation code is no longer valid
     *
     * Defaults to 604800 which is 7 days
     *
     * @var int
     */
    protected $timeLimit = 604800;

    protected function main()
    {
        $this->timeLimit = $this->Registry->Ini->VALIDATION_CODE_EXPIRATION;

        $this->getEmailRecord()
            ->validateExpiration()
            ->activateUser()
            ->setReturn();
    }

    /**
     * Select one row from EMAILS table
     *
     * @throws \Lampcms\Exception
     * @return $this
     */
    protected function getEmailRecord()
    {
        $eid = $this->Router->getNumber(1);
        $hash = $this->Router->getSegment(2);

        $this->aEmail = $this->Registry->Mongo->EMAILS->findOne(array('_id' => $eid, 'code' => $hash));
        if (empty($this->aEmail)) {

            throw new \Lampcms\Exception('@@Unable to find user@@');
        }

        d('$this->aEmail: ' . \print_r($this->aEmail, 1));

        return $this;
    }


    /**
     * Make sure that validation code is not
     * expired
     *
     * @todo need to generate new validation code and re-email it
     *       to the same user
     *
     * @throws \Lampcms\NoticeException
     * @return object $this
     */
    protected function validateExpiration()
    {
        if (($this->aEmail['i_code_ts'] + $this->timeLimit) < time()) {

            throw new \Lampcms\NoticeException('@@Activation code no longer valid@@');
        }

        return $this;
    }


    /**
     * Change user's user_group_id to registered
     * and set validation_time to now in EMAILS record
     *
     * @throws \Lampcms\NoticeException
     * @throws \Lampcms\Exception
     * @return object $this
     */
    protected function activateUser()
    {
        $aUser = $this->Registry->Mongo->USERS->findOne(array(Schema::PRIMARY => (int)$this->aEmail['i_uid']));

        if (empty($aUser)) {

            throw new \Lampcms\Exception('@@Unable to find user, please create a new account@@');
        }

        $this->oActivatedUser = User::userFactory($this->Registry, $aUser);
        $role = $this->oActivatedUser->getRoleId();
        /**
         * If User's role is NOT 'unactivated' then
         * throw an exception
         */
        if (false === \strstr($role, 'unactivated')) {

            throw new \Lampcms\NoticeException('@@This account has already been activated@@');
        }

        $this->oActivatedUser->activate()->save();

        /**
         * Now IF Viewer is actually the user that was just activated
         * we must also update the Viewer!
         * If we don't then the Viewer object is not updated
         * and the Viewer in session is still unactivated
         */
        if ($this->Registry->Viewer->equals($this->oActivatedUser)) {
            $this->processLogin($this->oActivatedUser);
        }

        $this->Registry->Dispatcher->post($this->oActivatedUser, 'onUserActivated');

        $this->aEmail['i_vts'] = time();
        $this->Registry->Mongo->EMAILS->save($this->aEmail);

        return $this;
    }

    /**
     *
     *
     */
    protected function setReturn()
    {
        $this->aPageVars['title'] = '@@Account activation complete@@';
        /**
         * @todo translate string
         */
        $this->aPageVars['body'] = '<div id="tools" class="larger">@@Account activation complete@@<br/>The account <b>' . $this->oActivatedUser->username . '</b> now has all the privileges<br/>
		of a registered user on our website.<br/>
		<br/>If you not already logged in, please login using<br/>
		the form above</div>';
    }


    protected function sendNewCode()
    {

    }
}
