<?php
/**
 *
 * License, TERMS and CONDITIONS
 *
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * Please read the license here : http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * ATTRIBUTION REQUIRED
 * 4. All web pages generated by the use of this software, or at least
 *       the page that lists the recent questions (usually home page) must include
 *    a link to the http://www.lampcms.com and text of the link must indicate that
 *    the website's Questions/Answers functionality is powered by lampcms.com
 *    An example of acceptable link would be "Powered by <a href="http://www.lampcms.com">LampCMS</a>"
 *    The location of the link is not important, it can be in the footer of the page
 *    but it must not be hidden by style attributes
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE FREEBSD PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This product includes GeoLite data created by MaxMind,
 *  available from http://www.maxmind.com/
 *
 *
 * @author     Dmitri Snytkine <cms@lampcms.com>
 * @copyright  2005-2012 (or current year) Dmitri Snytkine
 * @license    http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * @link       http://www.lampcms.com   Lampcms.com project
 * @version    Release: 0.2.45
 *
 *
 */


namespace Lampcms\Controllers;

use Lampcms\UserVotesBlock;
use Lampcms\WebPage;
use Lampcms\User;
use Lampcms\Template\Urhere;
use Lampcms\ProfileDiv;
use Lampcms\UserTagsBlock;
use Lampcms\UserFollowedTags;
use Lampcms\UserQuestions;
use Lampcms\UserAnswers;

/**
 * Controller for the /userinfo/$uid/$username page
 *
 * @author Dmitri Snytkine
 *
 */
class Userinfo extends WebPage
{

    /**
     * @var int
     */
    protected $layoutID = 1;

    protected $aAllowedVars = array('username', 'mode', 'sort');

    /**
     * User object
     *
     * @var object \Lampcms\User
     */
    protected $User;

    /**
     * Number of url segment that represents userID
     * It may be different in sub-classes
     *
     * @var int
     */
    protected $uidSegment = 1;

    protected $vars = array(
        'profile'   => '',
        'questions' => '',
        'answers'   => '',
        'votes'     => '',
        'tags'      => '');

    protected function main()
    {
        $this->getUser()
            ->checkUsername()
            ->addProfile()
            ->addQuestions()
            ->addAnswers()
            ->addVotes()
            ->addFollowedTags()
            ->addTags();
    }


    /**
     * Create $this->User object
     * that represents User whose profile
     * is being viewed currently
     *
     *
     * @throws \Lampcms\Lampcms404Exception
     * @return object $this
     */
    protected function getUser()
    {
        $uid = $this->Router->getSegment($this->uidSegment, 'i');
        $a   = $this->Registry->Mongo->USERS->findOne(array('_id' => $uid));

        if (empty($a)) {

            throw new \Lampcms\Lampcms404Exception('@@User not found@@');
        }

        $this->User               = User::userFactory($this->Registry, $a);
        $this->aPageVars['title'] = $this->User->getDisplayName();

        return $this;
    }


    /**
     * Check that username passed in url matches the
     * username of user.
     *
     * @throws \Lampcms\RedirectException in case username passed
     * in url does not match actual username for this user, in which
     * case there will be a redirect to user with correct user name.
     * This is basically good for SEO to prevent possibility of different urls
     * pointing to the same page
     *
     * @return object $this
     */
    protected function checkUsername()
    {
        /**
         * In order to be able to have utf-8 chars in username
         * we must extract the raw value of last segment
         * and then urldecode it.
          */
        if (!empty($_SERVER) && !empty($_SERVER['REQUEST_URI'])) {
            $r        = $_SERVER['REQUEST_URI'];
            $pos      = \strrpos($r, '/');
            $supplied = \substr($r, $pos + 1);
            $supplied = \urldecode($supplied);
        } else {
            d('bad news. $_SERVER[\'REQUEST_URI\'] not available on this web server. Defaulting to old way of extracting username');
            $supplied = $this->Router->getSegment(2, 's', 'a');
        }

        if (!empty($supplied)) {
            $username = $this->User->username;
            if (!empty($username) && (\strtolower($username) !== \strtolower($supplied))) {
                d('supplied username ' . $supplied . ' is not the same as actual username: ' . $username);

                throw new \Lampcms\RedirectException('{_WEB_ROOT_}/{_userinfo_}/' . $this->User->getUid() . '/' . $username);
            }
        }

        return $this;
    }


    /**
     * Add profile block
     *
     * @return object $this
     */
    protected function addProfile()
    {
        $profile                 = ProfileDiv::factory($this->Registry)->setUser($this->User)->getHtml();
        $this->aPageVars['body'] = $profile;

        return $this;
    }


    /**
     * Add block with user questions
     *
     * @return object $this
     *
     * @todo finish up with pagination
     *
     */
    protected function addQuestions()
    {
        /**
         * html of parsed questions and pagination links
         * at the bottom all wrapped inside <div class="user_tags">
         *
         * @var $userQuestions
         */
        $userQuestions = UserQuestions::get($this->Registry, $this->User);

        /**
         * UserQuestions::get() may return an empty string
         * if this user does not have
         * any questions in which case skip the
         * rest of the method
         */
        if (empty($userQuestions)) {
            return $this;
        }

        $cond = $this->Registry->Request->get('sort', 's', 'recent');
        $tabs = Urhere::factory($this->Registry)->get('tplSortuq', $cond, array('uid' => $this->User->getUid()));

        $questiondBlock = '<div id="uquestions" class="sortable paginated">' . $userQuestions . '</div>';

        $this->aPageVars['body'] .= $tabs . $questiondBlock;

        return $this;
    }


    /**
     * Add block with user's answers
     *
     * @return object $this
     *
     * @todo finish up with pagination
     *
     */
    protected function addAnswers()
    {
        /**
         *
         * html of parsed answers and pagination links
         * at the bottom all wrapped inside <div class="user_answers">
         *
         * @var $userQuestions
         */
        $userQuestions = UserAnswers::get($this->Registry, $this->User);

        /**
         * UserQuestions::get() may return an empty string
         * if this user does not have
         * any answers in which case skip the
         * rest of the method
         */
        if (empty($userQuestions)) {
            return $this;
        }

        /**
         * @todo must user Router now!
         */
        $cond = $this->Registry->Request->get('sort', 's', 'recent');
        $tabs = Urhere::factory($this->Registry)->get('tplSortuans', $cond, array('uid' => $this->User->getUid()));

        $ansBlock = '<div id="useranswers" class="cp fl sortable paginated">' . $userQuestions . '</div>';

        $this->aPageVars['body'] .= $tabs . $ansBlock;

        return $this;
    }


    /**
     * Add block with user votes stats
     *
     * @return object $this
     */
    protected function addVotes()
    {
        $this->aPageVars['body'] .= UserVotesBlock::get($this->Registry, $this->User);

        return $this;
    }


    /**
     * Add block with user's tags
     *
     * @return object $this
     */
    protected function addTags()
    {
        $this->aPageVars['body'] .= UserTagsBlock::get($this->Registry, $this->User);

        return $this;
    }


    /**
     * Add block that shows tags that this user
     * is following and also possibly block with tags
     * that both Viewer and User are following
     *
     * @return object $this
     */
    protected function addFollowedTags()
    {
        $this->aPageVars['body'] .= UserFollowedTags::get($this->Registry, $this->User);

        return $this;
    }

}
