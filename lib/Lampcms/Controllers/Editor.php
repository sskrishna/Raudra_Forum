<?php
/**
 *
 * License, TERMS and CONDITIONS
 *
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * Please read the license here : http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * ATTRIBUTION REQUIRED
 * 4. All web pages generated by the use of this software, or at least
 *       the page that lists the recent questions (usually home page) must include
 *    a link to the http://www.lampcms.com and text of the link must indicate that
 *    the website\'s Questions/Answers functionality is powered by lampcms.com
 *    An example of acceptable link would be "Powered by <a href="http://www.lampcms.com">LampCMS</a>"
 *    The location of the link is not important, it can be in the footer of the page
 *    but it must not be hidden by style attributes
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE FREEBSD PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This product includes GeoLite data created by MaxMind,
 *  available from http://www.maxmind.com/
 *
 *
 * @author     Dmitri Snytkine <cms@lampcms.com>
 * @copyright  2005-2012 (or current year) Dmitri Snytkine
 * @license    http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * @link       http://www.lampcms.com   Lampcms.com project
 * @version    Release: 0.2.45
 *
 *
 */


namespace Lampcms\Controllers;


use Lampcms\Mongo\Schema\Answer as AnswerSchema;
use Lampcms\Mongo\Schema\Question as QuestionSchema;
use Lampcms\Request;
use Lampcms\Responder;
use Lampcms\String\HTMLStringParser;
use Lampcms\Utf8String;

/**
 * Controller for processing "Edit"
 * form for editing Question or Answer
 *
 * @todo   should move the parsing to
 *         new class so the whole parsing thing
 *         can later be used from the API and not just
 *         from this controller.
 *
 * @author Dmitri Snytkine
 *
 */
class Editor extends Edit
{

    protected $membersOnly = true;

    protected $requireToken = true;

    protected $bRequirePost = true;

    protected $aRequired = array('rid', 'rtype');

    /**
     * Object Utf8String represents body
     * of question
     *
     * @var object of type Utf8string
     */
    protected $Body;


    protected function main()
    {
        $this->getResource()
            ->checkPermission()
            ->makeForm();

        if ($this->Form->validate()) {
            $this->process()->updateQuestion()->returnResult();
        } else {
            $this->returnErrors();
        }
    }


    protected function returnErrors()
    {
        d('cp');

        if (Request::isAjax()) {
            d('cp');
            $aErrors = $this->Form->getErrors();

            Responder::sendJSON(array('formErrors' => $aErrors));
        }

        $this->makeTopTabs()
            ->makeMemo()
            ->setForm();
    }


    /**
     *
     * Process submitted form values
     *
     * edge cases with category: if category was required
     *       when question was posted but now it's optional
     *       then it's possible to change the category from selected one
     *       to empty (no category) by simply selecting the "no category"
     *       in the drop down menu. Also if category support was removed completely
     *       by admin by setting CATEGORIES to empty in !config.ini
     *       then submitted value will be empty - in this case we don't want to
     *       update an existing category with an empty one. So the only way we can
     *       accept the empty category is when CATEGORIES are optional and empty value is submitted
     *
     *
     *
     *
     * @return \Lampcms\Controllers\Editor
     */
    protected function process()
    {
        $this->Registry->Dispatcher->post($this->Resource, 'onBeforeEdit');

        $formVals = $this->Form->getSubmittedValues();
        d('formVals: ' . print_r($formVals, 1));

        $this->Resource[QuestionSchema::BODY]        = $this->makeBody($formVals['qbody']);
        $this->Resource[QuestionSchema::WORDS_COUNT] = $this->Body->asPlainText()->getWordsCount();

        /**
         * @important Don't attempt to edit the value of title
         *            for the answer since it technically does not have the title
         *            If we don't skip this step for Answer then title
         *            of answer will be removed
         */
        if ($this->Resource instanceof \Lampcms\Question) {
            $origTitle      = $this->Resource[QuestionSchema::TITLE];
            $origCategoryId = $this->Resource[QuestionSchema::CATEGORY_ID];
            d('$origTitle: ' . $origTitle . ' $origCategoryId: ' . $origCategoryId);

            $oTitle     = $this->makeTitle($formVals['title']);
            $title      = $oTitle->valueOf();
            $categoryId = \array_key_exists('category', $formVals) ? $formVals['category'] : 0;
            $categoryId = (int)$categoryId;

            $this->Resource[QuestionSchema::TITLE]       = $title;
            $this->Resource[QuestionSchema::URL]         = $oTitle->toASCII()->makeLinkTitle()->valueOf();
            $this->Resource[QuestionSchema::TITLE_ARRAY] = \Lampcms\TitleTokenizer::factory($oTitle)->getArrayCopy();

            /**
             *
             * Need to update 'title' of all answers to this question
             * But first check to see if title has actually changed
             *
             * ONLY if Question status is POSTED (don't do anything for pending)
             *
             */
            if ($this->Resource[QuestionSchema::RESOURCE_STATUS_ID] === QuestionSchema::POSTED) {
                if ($origTitle !== $title) {
                    $this->updateAnswersTitle($title);
                }

                if ($origCategoryId !== $categoryId) {
                    /**
                     * If Submitted category ID is empty
                     * then allow it ONLY if category support is optional ( value of CATEGORIES is 1 in !config.ini)
                     */
                    if ($categoryId > 0 || $this->Registry->Ini->CATEGORIES == 1) {
                        $this->Resource[QuestionSchema::CATEGORY_ID] = $categoryId;
                        $this->updateCategoryCounter($origCategoryId, $categoryId);
                        /**
                         * Post onCategoryUpdate event
                         * It will cause the CacheObserver to unset the cached categories html blocks
                         */
                        $this->Registry->Dispatcher->post($this->Resource, 'onCategoryUpdate');
                    }
                }
            }
        }

        $this->Resource->setEdited($this->Registry->Viewer, \strip_tags($formVals['reason']));
        $this->Resource->touch()->save();

        $this->Registry->Dispatcher->post($this->Resource, 'onEdit');

        return $this;
    }


    /**
     *
     * Update the contents of body
     * with edited content
     * If this is a question do extra steps;
     * unhighlight (just in case that actual highlighed words
     * have been edited), then re-apply highlightWords()
     * just in case some of the new word that belong to
     * tags have been added
     *
     * @param string $body
     *
     * @return string html of new body
     *
     */
    protected function makeBody($body)
    {
        /**
         * Must pass array('drop-proprietary-attributes' => false)
         * otherwise tidy removes rel="code"
         */
        $aEditorConfig = $this->Registry->Ini->getSection('EDITOR');
        $tidyConfig    = ($aEditorConfig['ENABLE_CODE_EDITOR']) ? array('drop-proprietary-attributes' => false) : null;

        $this->Body = Utf8String::stringFactory($body)
            ->tidy($tidyConfig)
            ->safeHtml()
            ->asHtml();

        $Body = HTMLStringParser::stringFactory($this->Body)->parseCodeTags()->linkify()->reload()->setNofollow();

        if ($this->Resource instanceof \Lampcms\Question) {
            $Body->unhilight()->hilightWords($this->Resource['a_tags']);
        }

        $htmlBody = $Body->valueOf();

        d('after HTMLStringParser: ' . $htmlBody);

        return $htmlBody;
    }


    /**
     * Make new value of title
     *
     * @param string $title
     *
     * @return object of type Utf8String
     */
    protected function makeTitle($title)
    {
        $oTitle = Utf8String::stringFactory($title)->htmlentities()->trim();
        d('$oTitle ' . $oTitle);

        return $oTitle;
    }


    /**
     * If Edited resource was an ANSWER then we must update
     * last-modified of its QUESTION
     *
     * @return object $this
     */
    protected function updateQuestion()
    {
        if ('ANSWERS' === $this->collection) {
            d('need to update QUESTION');

            try {
                $this->Registry->Mongo->QUESTIONS->update(array('_id' => $this->Resource['i_qid']),
                    array(
                        '$set' => array(
                            'i_lm_ts' => time(),
                            'i_etag'  => time())
                    )
                );
            } catch ( \MongoException $e ) {
                d('unable to update question ' . $e->getMessage());
            }
        }

        return $this;
    }

    /**
     * If ID of category of question changes
     * must update the counter of questions in the new category (+1)
     * and decrease count in old category (-1)
     *
     * If question has any answers must update counter of answers in old category (-$numAnswers)
     * and increase counter in new category (+$numAnswers)
     *
     * @param $oldCategoryId
     * @param $newCategoryId
     *
     * @return $this
     * @throws \InvalidArgumentException if $oldId or $newId is not an integer
     * @internal param int $oldId
     * @internal param int $newId
     *
     */
    protected function updateCategoryCounter($oldCategoryId, $newCategoryId)
    {
        if (!is_int($oldCategoryId)) {
            throw new \InvalidArgumentException('$oldCategoryId is not an integer');
        }

        if (!is_int($newCategoryId)) {
            throw new \InvalidArgumentException('$newCategoryId is not an integer');
        }

        $CategoryUpdator = new \Lampcms\Category\Updator($this->Registry->Mongo);
        $CategoryUpdator->removeQuestionById($this->Resource[QuestionSchema::PRIMARY], $oldCategoryId);
        $CategoryUpdator->increaseQuestionCount($newCategoryId);

        $answersCount = $this->Resource[QuestionSchema::NUM_ANSWERS];
        d('Count of answers: ' . $answersCount);
        if ($answersCount > 0) {
            $CategoryUpdator->decreaseAnswerCount($oldCategoryId, $answersCount);
            $CategoryUpdator->increaseAnswerCount($newCategoryId, $answersCount);
        }

        return $this;
    }


    /**
     * Update all answers for the edited question
     * with the new title.
     * This method is called only if the title of the question
     * has changed
     *
     * @param string $newTitle
     *
     * @return $this
     */
    protected function updateAnswersTitle($newTitle)
    {
        /**
         * We called this method after we already made sure that
         * the edit is for the Question , not for the Answer
         * but it's so important to make sure that this is the Question edit
         * that we will check it again here.
         *
         *
         */
        if ($this->Resource instanceof \Lampcms\Question) {
            d('updating all questions with new title: ' . $newTitle);
            $AnswerParser = new \Lampcms\AnswerParser($this->Registry);
            $AnswerParser->updateTitle($this->Resource[QuestionSchema::PRIMARY], $newTitle);
        }

        return $this;
    }


    protected function returnResult()
    {
        Responder::redirectToPage($this->Resource->getUrl());
    }
}
