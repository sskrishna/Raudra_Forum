<?php
/**
 *
 * License, TERMS and CONDITIONS
 *
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * Please read the license here : http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * ATTRIBUTION REQUIRED
 * 4. All web pages generated by the use of this software, or at least
 *       the page that lists the recent questions (usually home page) must include
 *    a link to the http://www.lampcms.com and text of the link must indicate that
 *    the website\'s Questions/Answers functionality is powered by lampcms.com
 *    An example of acceptable link would be "Powered by <a href="http://www.lampcms.com">LampCMS</a>"
 *    The location of the link is not important, it can be in the footer of the page
 *    but it must not be hidden by style attributes
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE FREEBSD PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This product includes GeoLite data created by MaxMind,
 *  available from http://www.maxmind.com/
 *
 *
 * @author     Dmitri Snytkine <cms@lampcms.com>
 * @copyright  2005-2012 (or current year) Dmitri Snytkine
 * @license    http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * @link       http://www.lampcms.com   Lampcms.com project
 * @version    Release: 0.2.45
 *
 *
 */

namespace Lampcms\Controllers;

use \Lampcms\Responder;
use \Lampcms\WebPage;
use \Lampcms\Request;

/**
 * Controller for rendering and processing
 * a form where admin can enter shell command to
 * execute on mongo server
 */
class Mongoshell extends WebPage
{

    /**
     * Permission required to use this controller is run_mongo_shell
     * must be defined in config/acl.ini
     * This is an extremely dangerous permission
     * and should be given only to administrators
     * Make sure this permission is only set for administrator
     * in acl.ini
     *
     * @var string
     */
    protected $permission = 'run_mongo_shell';

    protected $membersOnly = true;

    /**
     * layoutID 1 means single-column page
     *
     * @var int
     */
    protected $layoutID = 1;

    public function main()
    {
        if (Request::isPost()) {
            $this->processShell();
        } else {
            $this->renderForm();
        }
    }


    /**
     * Execute the shell command that
     * was entered in the web form
     * First validate the form token
     *
     * When execution of shell is done will render either a success message
     * or failure.
     *
     * Result is also logged
     *
     * @throws \Lampcms\TokenException if token not valid
     */
    protected function processShell()
    {
        $command = $this->Request['command'];
        \Lampcms\Forms\Form::validateToken($this->Registry);
        d('about to run mongo shell: ' . $command);
        try {
            $res = $this->Registry->Mongo->getDb()->execute($command);
            d('result of execute: ' . \json_encode($res));
            if (\is_array($res) && isset($res['ok']) && $res['ok'] == 1) {
                $this->aPageVars['body'] = '<div id="tools">@@Mongo Update complete@@</div>';
            } else {
                e('Failed to execute mongo command. $res: ' . \json_encode($res));
                $this->aPageVars['body'] = '<div id="tools">@@Mongo Update Failed@@<br>' . \print_r($res, 1) . '</div>';
            }
        } catch ( \Exception $e ) {
            e('Failed to run mongo command: ' . $command . ' Exception: ' . \get_class($e) . ' Message: ' . $e->getMessage() . ' file: ' . $e->getFile() . ' line: ' . $e->getLine());
            $this->aPageVars['body'] = '<div id="tools">@@Mongo Update Failed@@<br>' . $e->getMessage() . '</div>';
        }
    }


    /**
     * Render the form with textarea where admin
     * will enter the mongo shell command
     */
    protected function renderForm()
    {
        $this->aPageVars['title'] = '@@Update Mongo Database@@';
        $this->aPageVars['body']  = \tplMongoShell::parse(array(\Lampcms\Forms\Form::generateToken()));
    }
}
