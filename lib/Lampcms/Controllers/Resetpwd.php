<?php
/**
 *
 * License, TERMS and CONDITIONS
 *
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * Please read the license here : http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * ATTRIBUTION REQUIRED
 * 4. All web pages generated by the use of this software, or at least
 *       the page that lists the recent questions (usually home page) must include
 *    a link to the http://www.lampcms.com and text of the link must indicate that
 *    the website's Questions/Answers functionality is powered by lampcms.com
 *    An example of acceptable link would be "Powered by <a href="http://www.lampcms.com">LampCMS</a>"
 *    The location of the link is not important, it can be in the footer of the page
 *    but it must not be hidden by style attributes
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE FREEBSD PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This product includes GeoLite data created by MaxMind,
 *  available from http://www.maxmind.com/
 *
 *
 * @author     Dmitri Snytkine <cms@lampcms.com>
 * @copyright  2005-2012 (or current year) Dmitri Snytkine
 * @license    http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * @link       http://www.lampcms.com   Lampcms.com project
 * @version    Release: 0.2.45
 *
 *
 */

namespace Lampcms\Controllers;

use \Lampcms\WebPage;
use \Lampcms\Request;
use \Lampcms\String;
use \Lampcms\Mongo\Schema\User as Schema;

/**
 * Class responsible for
 * displaying the reset password
 * form, processing the form,
 * generating a new random password
 * for user
 * and emailing it to user
 */
class Resetpwd extends WebPage
{

    protected $username;

    protected $email;

    protected $layoutID = 1;

    /**
     * Newly generated password
     *
     * @var string
     */
    protected $newPwd;

    protected function main()
    {

        d('$this->newPwd: ' . $this->newPwd);

        $this->checkHacks()
            ->validateCode()
            ->generatePassword()
            ->savePassword()
            ->emailPwd();

        $this->aPageVars['title'] = '@@Password reset@@';
        $this->aPageVars['body']  = '<div class="frm1">@@New password was just sent to your email@@ ' . $this->email . '</div>';
    }


    protected function generatePassword()
    {
        $this->newPwd = String::makePasswd();

        return $this;
    }


    /**
     *
     * Update USERS collection with the
     * new value of salted password
     *
     * @internal param string $pwd
     * @internal param int $uid
     *
     * @return object $this
     */
    protected function savePassword()
    {
        d('$this->newPwd: ' . $this->newPwd);
        $uid = $this->Router->getNumber(1);

        $salted  = String::hashPassword($this->newPwd);
        $newdata = array('$set' => array(Schema::PASSWORD => $salted));

        $this->Registry->Mongo->USERS->update(array(Schema::PRIMARY => (int)$uid), $newdata);

        return $this;
    }


    /**
     * Checks that supplied password reset code
     * is valid and matches the supplied uid
     * and is not older than 24 hours
     *
     * Up to 10 results will be selected
     * and each one will be tested until
     * a positive match is found.
     *
     * This is so that
     * if a user requested a password reset link
     * several times
     * (maybe forgot to take his medications or something like that)
     * then any one of the requested codes sent to user will be considered valid.
     *
     *
     * @throws \Lampcms\AlertException
     * @throws \Lampcms\NoticeException
     * @return object $this
     */
    protected function validateCode()
    {
        $timeOffset = (time() - 86500);
        $uid        = $this->Router->getNumber(1);
        $hash       = $this->Router->getSegment(2);

        $aResult = $this->Registry->Mongo->PASSWORD_CHANGE
            ->findOne(array('_id'   => $hash,
                            'i_uid' => $uid));

        d('$aResult ' . \print_r($aResult, true));

        if (empty($aResult)) {

            $this->saveFailedAttempt()->Registry->Dispatcher->post($this, 'onFailedPasswordReset');

            throw new \Lampcms\AlertException('@@Wrong password reset code@@');
        }


        if ($aResult['i_ts'] < $timeOffset) {
            d('code expired');

            throw new \Lampcms\NoticeException('@@Password reset code expired@@');
        }


        if (!empty($aResult['i_used'])) {
            d('code used');

            throw new \Lampcms\NoticeException('@@This password reset link was already used on@@ ' . date('r', $aResult['i_used']));
        }

        $aVal = $this->Registry->Mongo->USERS->findOne(array(Schema::PRIMARY => (int)$aResult['i_uid']));

        $this->username = $aVal['username'];
        $this->email    = $aVal['email'];
        $this->markCodeUsed();

        return $this;
    }


    /**
     * Once the password reset code has been
     * validated we should delete it so that it cannot
     * be reused. This is both for security reason
     * and so that the same user cannot accidentally change
     * the password again by clicking on the
     * same link in email
     *
     * @return object $this
     */
    protected function markCodeUsed()
    {
        $newdata = array('$set' => array('i_used' => time()));
        $hash    = $this->Router->getSegment(2);

        $this->Registry->Mongo->PASSWORD_CHANGE->update(array('_id' => $hash), $newdata);

        return $this;
    }


    /**
     * Saves geodata from where the failed
     * reset password attempt came from
     *
     * @return object $this
     */
    protected function saveFailedAttempt()
    {
        $ip  = Request::getIP();
        $uid = $this->Router->getNumber(1);

        $aData = array(
            'i_uid' => (int)$uid,
            'i_ts'  => time());

        $res = $this->saveResourceLocation('1', $ip, $aData, 'PASSWORD_CHANGE');

        d('$res: ' . $res);

        return $this;
    }


    /**
     * Check for previous
     * failed attempts to reset password
     * by using incorrect code
     *
     *
     * @throws \Lampcms\Exception
     * @return object $this
     */
    protected function checkHacks()
    {
        $ipHacks  = 0;
        $uidHacks = 0;
        $uid      = $this->Router->getNumber(1);

        $timeOffset = time() - 86400;
        $cur        = $this->Registry->Mongo->PASSWORD_CHANGE->find(array('i_ts' > $timeOffset));

        if ($cur && ($cur->count(true) > 0)) {

            $ip = Request::getIP();

            foreach ($cur as $aVal) {
                if ($ip == $aVal['ip']) {
                    $ipHacks += 1;
                }

                if ($uid == $aVal['i_uid']) {
                    $uidHacks += 1;
                }

                if ($uidHacks > 5 || $ipHacks > 5) {
                    e('LampcmsError: hacking of password reset link. $uidHacks: ' . $uidHacks . ' $ipHacks: ' . $ipHacks . ' from ip: ' . $ip);

                    $this->Registry->Dispatcher->post($this, 'onPasswordResetHack', $aVal);

                    throw new \Lampcms\Exception('@@Access denied@@');
                }
            }
        }

        return $this;
    }


    /**
     * Send out the new password to user
     *
     * @return \Lampcms\Controllers\Resetpwd
     */
    protected function emailPwd()
    {
        $Tr = $this->Registry->Tr;

        $body = $Tr->get('email.body.new_password', array(
                '{site_title}' => $this->Registry->Ini->SITE_NAME,
                '{username}'   => $this->username,
                '{password}'   => $this->newPwd)
        );
        print_r($body);

        $subject = $Tr->get('email.subject.new_password', array('{site_title}' => $this->Registry->Ini->SITE_NAME));

        $this->Registry->Mailer->mail($this->email, $subject, $body);

        return $this;
    }

}
