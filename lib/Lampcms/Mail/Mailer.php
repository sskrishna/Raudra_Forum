<?php
/**
 *
 * License, TERMS and CONDITIONS
 *
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * Please read the license here : http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * ATTRIBUTION REQUIRED
 * 4. All web pages generated by the use of this software, or at least
 *       the page that lists the recent questions (usually home page) must include
 *    a link to the http://www.lampcms.com and text of the link must indicate that
 *    the website\'s Questions/Answers functionality is powered by lampcms.com
 *    An example of acceptable link would be "Powered by <a href="http://www.lampcms.com">LampCMS</a>"
 *    The location of the link is not important, it can be in the footer of the page
 *    but it must not be hidden by style attributes
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE FREEBSD PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This product includes GeoLite data created by MaxMind,
 *  available from http://www.maxmind.com/
 *
 *
 * @author     Dmitri Snytkine <cms@lampcms.com>
 * @copyright  2005-2012 (or current year) Dmitri Snytkine
 * @license    http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * @link       http://www.lampcms.com   Lampcms.com project
 * @version    Release: 0.2.45
 *
 *
 */


namespace Lampcms\Mail;

use \Lampcms\DevException;
use \Lampcms\I18n\TranslatableInterface;
use \Lampcms\I18n\Translator;
use \Lampcms\Mongo\Schema\User as Schema;
use \Lampcms\String;

/**
 * Class for sending out emails
 *
 * @author Dmitri Snytkine
 *
 */
class Mailer
{

    protected $adminEmail;

    protected $siteName;

    protected $from;

    /**
     * Swift Mailer object
     *
     * @var object
     */
    protected $SwiftMailer;

    /**
     * Ini object
     *
     * @var object Lampcms\Ini
     */
    protected $Ini;

    /**
     * @var array array of I18N\Translator objects
     * where keys are locale names
     */
    protected $translators = array();

    /**
     * @var array keys are locale names
     * values are translated bodies of message
     */
    protected $translatedMessages = array();

    /**
     * Cache object
     * It is needed for instantiating different
     * instances of Translator class (one for each locale)
     *
     * @var \Lampcms\Cache\Cache object
     */
    protected $Cache;

    /**
     * @param \Lampcms\Config\Ini        $Ini
     * @param \Lampcms\Cache\Cache|null $cache
     */
    public function __construct(\Lampcms\Config\Ini $Ini, \Lampcms\Cache\Cache $cache = null)
    {
        $this->Ini        = $Ini;
        $this->adminEmail = $Ini->EMAIL_ADMIN;
        $this->siteName   = $Ini->SITE_NAME;
        $this->from       = \Lampcms\String::prepareEmail($this->adminEmail, $this->siteName);
        $this->setupSwiftMailer();
        $this->Cache = $cache;
    }


    public function setCache(\Lampcms\Cache\Cache $cache)
    {
        $this->Cache = $cache;
    }


    public function getCache(){
        if(!is_object($this->Cache)){
            throw new DevException('Cache object has not been setup. Use setCache() and pass instance of cache before calling method that needs Translator instance (Translator depends on Cache)');
        }

        return $this->Cache;
    }


    /**
     * Configure and setup SwiftMailer object
     *
     * @throws SwiftException if there are problems with creating Swift Mailer instance
     */
    protected function setupSwiftMailer()
    {
        $config = $this->Ini['EMAIL_SERVER'];
        switch ( $config['TRANSPORT'] ) {
            case 'sendmail':
                $path      = $config['SENDMAIL_PATH'];
                $options   = $config['SENDMAIL_OPTIONS'];
                $command   = \trim($path . ' ' . $options);
                $transport = \Swift_SendmailTransport::newInstance($command);
                break;

            case 'smtp':
                $host     = $config['SMTP_HOST'];
                $port     = $config['SMTP_PORT'];
                $user     = $config['SMTP_USERNAME'];
                $password = $config['SMTP_PASSWORD'];
                $enc      = \trim($config['SMTP_ENCRYPTION']);
                if ('' === $enc) {
                    $enc = null;
                }
                if (!empty($enc)) {
                    $supported = \stream_get_transports();
                    if (!\in_array($enc, $supported)) {
                        throw new SwiftException('smtp_encryption set to "' . $enc .
                            '" but php is not compiled with this transport wrapper. Make sure your php has OpenSSL module with ' . $enc . ' transport');
                    }
                }

                $transport = \Swift_SmtpTransport::newInstance($host, $port, $enc);
                if (!empty($user)) {
                    $transport->setUsername($user)
                        ->setPassword($password);
                }

                break;

            default:
                $transport = \Swift_MailTransport::newInstance();
        }

        try {
            $this->SwiftMailer = \Swift_Mailer::newInstance($transport);
        } catch ( \Exception $e ) {
            throw new SwiftException('Unable to create Swift_Mailer instance. Got exception: ' .
                \get_class($e) . ' Message: ' . $e->getMessage() .
                ' in file ' . $e->getFile() . ' line ' . $e->getLine());
        }
    }


    /**
     * This is a main mail function to send
     * email to individual user or to array or recipients
     * or even by passing Iterator object to it such
     * as MongoCursor
     *
     * The better more fine-tuned method mailFromCursor
     * should be used when sending mass email and when we know
     * that cursor contains several hundreds of records
     *
     * Sends our emails using the mail()
     * but can be sent from inside the runLater
     * This way function returns immediately
     *
     * Also accept Iterator so we can use the
     * cursor in place of $to
     *
     * Has the ability to pass in
     * callback function and that function
     * would return email address or false
     * if email should not be sent
     * This will be used if $to is iterator or array
     * and contains fields like e_ft = null or does not exist
     * So we can check if (empty($a['e_ft']){
     *  return false // skip this one
     * } else {
     *  return $a['email'];
     * }
     *
     * @todo for best result we should actually fork another php
     *       script as regular cgi script (not fastcgi, just cgi php)
     *       and just pass arguments to it and let it run as long as necessary,
     *       looping over the array of recipients and sending out emails
     *       The problem is that we cannot just pass cursor or even an array
     *       of recipients to a cgi like this, we need to somehow pass data
     *       differently like not the actual data but the conditions and then
     *       let the cgi find that data and use it. We can do this via a cache
     *       just put array into cache and pass cache key to cgi script
     *       that would work for up to 4MB of data
     *       And then let cgi delete that key and just in case set the expiration
     *       on that key too so it will be deleted eventually even if cgi
     *       dies for some reason
     *
     * @param mixed    $to
     * @param string   $subject
     * @param string   $body
     *
     * @param bool     $sendLater if true (default) then will run
     *                            via the runLater, otherwise
     *                            will run immediately. So if this method itself is
     *                            invoked from some registered shutdown function then it
     *                            makes sense to not use the 'later' feature.
     *
     * @param function $func      callback function to be applied
     *                            to each record of the $to array.
     *
     * @return bool
     * @throws DevException
     */
    public function mail($to, $subject, $body = null, $func = null, $sendLater = true)
    {

        if (!is_string($to) && !is_array($to) && (!is_callable($to)) && (!is_object($to) || !($to instanceof \Iterator)) ) {

            $class = (\is_object($to)) ? \get_class($to) : 'not an object';

            throw new DevException('$to can be only string or array or object implementing Iterator. Was: ' . \gettype($to) . ' class: ' . $class);
        }

        if (null === $body && (!is_object($subject) || !($subject instanceof \Swift_Message))) {
            throw new DevException('$body cannot be null if $subject is not instance of \Swift_Message');
        }

        if(\is_string($to)){
            $aTo = array($to);
        } elseif(\is_array($to)){
            $aTo = $to;
        } else {
            d('$to is callable function');
        }

        $fromEmail = $this->adminEmail;
        $fromName  = $this->siteName;
        $Swift     = $this->SwiftMailer;
        $Cache     = $this->Cache;

        $callable = function() use ($subject, $body, $fromEmail, $fromName, $aTo, $func, $Swift, $Cache)
        {

            $translatedMessages = array();
            $translators        = array();

            if (!is_array($aTo) && is_callable($aTo)) {
                $aTo = $aTo();
            }

            $total = (is_array($aTo)) ? count($aTo) : $aTo->count();

            /**
             * @todo deal with breaking up
             *       the long array/cursor into
             *       smaller chunks and send emails
             *       in groups on N then wait N seconds
             *       This is handled differently for cursors and for arrays
             */
            if ($total > 0) {
                $failedRecipients = array();
                $numSent          = 0;
                try {
                    $message = (is_object($subject) && ($subject instanceof \Swift_Message) ) ? $subject : \Swift_Message::newInstance($subject)
                        ->setFrom(array($fromEmail => $fromName))
                        ->setBody($body)
                        ->setCharset('utf-8');
                } catch ( \Exception $e ) {
                    /**
                     * Do not use error-level logging because error log e($message)
                     * sends out email to admin.
                     * if we failed to send out email we don't want to attempt to notify
                     * admin by email - it can create infinite loop
                     */
                    d('Unable to create email message: ' . $e->getMessage() . ' Exception: ' . get_class($e));

                    return;
                }

                foreach ($aTo as $to) {
                    /**
                     * Deal with format of array when array
                     * is result of iterator_to_array($cur)
                     * where $cur is MongoCursor - result of
                     * find()
                     */
                    if (is_array($to)) {
                        /**
                         * If callback function is passed to mail()
                         * then it must accept array or
                         * one user record as argument and must
                         * return either email address (string)
                         * or false if record should be skipped
                         * For example, if array contains something like this
                         * 'email' => user@email.com,
                         * 'e_ft' => null
                         *
                         * Which indicates that user does not want
                         * to receive emails on followed tag
                         *
                         * This is a way to pass callback to serve
                         * as a filter - to users who opted out
                         * or receiving emails on specific events
                         * will not receive them
                         *
                         * Since each opt-out flag is different, the
                         * each callback for specific type of mailing
                         * will also be different.
                         *
                         */
                        if (is_callable($func)) {
                            $to = $func($to);
                        } elseif (!empty($to['email'])) {
                            $to = $to['email'];
                        }
                    }

                    /**
                     * Now it is possible that callback
                     * function returned null or false so we
                     * must now check that $to is not
                     * empty
                     * Also if array did not contain
                     * the 'email' key then nothing will
                     * be sent at this point because
                     * the $to will be !is_string() at
                     * this time - it will still be array
                     */
                    if (empty($to) || !is_string($to)) {

                        continue;
                    }

                    /**
                     * If user has locale and subject or body
                     * is Translatable then translate message
                     * and create locale-specific message object
                     *
                     */
                    $ER = error_reporting(0);

                    $message->setTo($to);
                    try {
                        $numSent += $Swift->send($message, $failedRecipients);
                    } catch ( \Exception $e ) {
                        /**
                         * Do not user error-level loggin because error log e($message)
                         * sends out email to admin.
                         * if we failed to send out email we don't want to attempt to notify
                         * admin by email - it can create infinite loop
                         */
                        d('Unable to send email: ' . $e->getMessage() . ' Exception: ' . get_class($e));
                    }

                    if (!empty($failedRecipients)) {
                        d('Failed recipients: ' . json_encode($failedRecipients));
                    }
                    error_reporting($ER);
                }

                d('sent ' . $numSent . ' emails');
            }

        };

        if ($sendLater) {
            \Lampcms\runLater($callable);
        } else {
            $callable();
        }

        return true;
    }

    /**
     * @todo This is unfinished!
     *       this has to be done via runLater($callback)
     *
     *
     *
     * @param EmailAccountInterface $to
     * @param                       $subject
     * @param                       $body
     * @param null                  $func
     * @param bool                  $sendLater
     *
     * @return bool
     * @throws \Lampcms\DevException
     */
    public function translateAndMail(EmailAccountInterface $to, $subject, $body, $func = null, $sendLater = true)
    {
        /**
         * If neither subject nor body are Translatable then just email as normal message
         */
        if (is_string($subject) && is_string($body)) {
            return $this->mail($to->getAddress(), $subject, $body, $func, $sendLater);
        }

        if (!is_object($subject) || !($subject instanceof TranslatableInterface)) {
            throw new DevException('$subject must be a string or instance of TranslatableInterface. Was: ' . gettype($subject) . ' ' . is_object($subject) ? get_class($subject) : '');
        }

        if (!is_object($body) || !($body instanceof TranslatableInterface)) {
            throw new DevException('$body must be a string or instance of TranslatableInterface. Was: ' . gettype($body) . ' ' . is_object($body) ? get_class($body) : '');
        }

        $locale = $to->getLocale();
        if (!array_key_exists($locale, $this->translatedMessages)) {
            if (!array_key_exists($locale, $this->translators)) {
                $this->translators[$locale] = Translator::factory($this->Cache, $locale);
            }

            if (is_object($subject)) {
                $subject = $this->translators[$locale]->get($subject->getString(), $subject->getVars());
            }

            if (is_object($body)) {
                $body = $this->translators[$locale]->get($body->getString(), $body->getVars());
            }


            $this->translatedMessages[$locale] = \Swift_Message::newInstance($subject)
                ->setFrom(array($this->adminEmail => $this->siteName))
                ->setCharset('utf-8')
                ->setBody($body);
        }

        $this->mail($to->getAddress(), $this->translatedMessages[$locale], null, $func, $sendLater);
    }


    /**
     *
     * The purpose of this method is to take
     * a Mongo cursor as a source of email addresses
     * then iterate over them and do create an array
     * of email addresses. May use callback function
     * to filter out addresses of people who
     * opted out of certain types
     * of emails updates
     *
     *
     * In case the cursor contains very large number of records it
     * may use the forkMail() method to form
     * mass mailing in the background
     *
     *
     * @param \MongoCursor $cur
     * @param string       $subject
     * @param string       $body
     * @param string       $func
     * @param bool         $sendLater
     */
    public function mailFromCursor(\MongoCursor $cur, $subject, $body, $func = null, $sendLater = false)
    {

        /**
         * Cannot change anything in the cursor
         * Cannot just do the skip() and limit()
         * it too late now! Attempting to modify a cursor
         * now will result in this type of exception: cannot modify cursor after beginning iteration.
         *
         * For a very large website a whole
         * new class should be written that can deal with
         * getting cursor with > 10,000 results then iterating over it,
         * creating array(s) of about 1000 emails, sending them out,
         * waiting couple of minutes and continuing
         *
         * This class can deal with results of up to 10,000 records per
         * one notification and will still be able to
         * handle this task relative well by creating array
         * and then forking a new cgi script in the background
         * to do actual email sending
         *
         * For couple of hundred emails or even a 1000 at a time
         * they can all be sent our from the same (this) process as long
         * as the process is run after the fastcgi_finish_request()
         *
         */

        $cID = spl_object_hash($cur);
        //$body = $body ."\n\n_______\ncid: ".$cID."\n";

        $translated = array();
        $aEmails    = array();
        $temp       = array();
        $locale     = LAMPCMS_DEFAULT_LOCALE;
        foreach ($cur as $a) {

            if (is_callable($func)) {
                $email = $func($a);
                if (!empty($email)) {
                    $aEmails[] = $email;
                }
            } else {
                if (!empty($a['email'])) {
                    /**
                     * If subject or body should be translated
                     * then make sure to include 'locale' in array
                     * of fields requested from Mongo USERS collection
                     * This is the only hint for this class that we
                     * want item to be translated into user's locale
                     */
                    if (\array_key_exists('locale', $a)) {
                        if (!\in_array($a['email'], $temp)) {
                            $temp[] = $a['email'];
                            $locale = $a['locale'];
                            if (!\array_key_exists($locale, $translated)) {
                                $translated[$locale] = array();
                            }

                            if (!\array_key_exists((string)$subject, $translated[$locale])) {
                                $translated[$locale][(string)$subject] = $this->translate($locale, $subject);
                            }

                            if (!\array_key_exists((string)$body, $translated[$locale])) {
                                $translated[$locale][(string)$body] = $this->translate($locale, $body);
                            }

                            $this->mail($a['email'], $translated[$locale][(string)$subject], $translated[$locale][(string)$body], null, $sendLater);
                        }

                    } else {
                        $aEmails[] = $a['email'];
                    }
                }
            }

        }

        if (!empty($aEmails)) {
            $aEmails = \array_unique($aEmails);

            /**
             *
             * @todo if count($aEmails) > 100 then formMail,
             *       else just \mail()
             *
             * Right now we don't have such cgi-based scripts
             * that can accept the cache key
             * but it will be the next-best-solution
             * for a busy site
             * and the very best solution would be
             * to form the whole EmailNotifier methods
             * from the cgi script
             * and the advanced solution for
             * sites that have over 10,000 followers per topic
             * or per some users would be to
             * form the whole process on a remove server
             * This is something that we can code on request
             * as it is not worth the time for just an average site
             */
            $this->mail($aEmails, (string)$subject, (string)$body, null, $sendLater);
        }

    }


    /**
     * Translate the $item into $locale language
     *
     * @param string $locale
     * @param mixed string|object of type TranslatableInterface $item
     *
     * @return string translated string
     * @throws \Lampcms\DevException
     */
    public function translate($locale, $item)
    {
        if (is_string($item)) {
            return $item;
        }

        if (!is_object($item) || !($item instanceof TranslatableInterface)) {
            throw new DevException('$item can only be a string or instance of TranslatableInterface. Was: ' . ((!is_object($item)) ? gettype($item) : get_class($item)));
        }

        $Tr = $this->getTranslator($locale);

        return \Lampcms\Utf8String::leftAlign($Tr->get($item->getString(), $item->getVars()));
    }

    /**
     * This method will take in array of email addresses
     * put then into cache and then form
     * a separate cgi php script and pass
     * that cache key to it as a param.
     * That cgi script will be able to retrieve
     * the array, break it up into
     * smaller chunks and send it out in intervals
     * and wait N seconds in between. That will not
     * be using up any of our webserver's php processes
     * so it's OK for such scripts to run several minutes
     *
     * This method by it's nature of forking another process
     * has the effect of passing a job to a separate thread
     * and as such it makes no sense to use it via shutdown
     * function as it is already designed to not add any significant
     * processing time to the main process
     *
     * @todo     finish writing it. Must have cgi
     *           version of php on the server with mongo
     *           extension because array of emails will be passed
     *           there via mongo key
     *
     * @param array  $aTo simple array of email addresses
     * @param string $subject
     * @param string $body
     *
     * @internal param bool $sendLater
     */
    public function forkMail(array $aTo, $subject, $body)
    {

    }

    /**
     * Get Translator object for a locale
     * If it does not exist in translators array create a new one
     * otherwise reuse the existing one
     *
     * @param string $locale
     *
     * @return object of type \Lampcms\I18n\Translator
     */
    public function getTranslator($locale)
    {
        $Cache = $this->getCache();
        if (!array_key_exists($locale, $this->translators)) {
            $this->translators[$locale] = \Lampcms\I18n\Translator::factory($Cache, $locale);
        }

        return $this->translators[$locale];
    }

}
