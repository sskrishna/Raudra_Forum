<?php
/**
 *
 * License, TERMS and CONDITIONS
 *
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * Please read the license here : http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * ATTRIBUTION REQUIRED
 * 4. All web pages generated by the use of this software, or at least
 *       the page that lists the recent questions (usually home page) must include
 *    a link to the http://www.lampcms.com and text of the link must indicate that
 *    the website's Questions/Answers functionality is powered by lampcms.com
 *    An example of acceptable link would be "Powered by <a href="http://www.lampcms.com">LampCMS</a>"
 *    The location of the link is not important, it can be in the footer of the page
 *    but it must not be hidden by style attributes
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE FREEBSD PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This product includes GeoLite data created by MaxMind,
 *  available from http://www.maxmind.com/
 *
 *
 * @author     Dmitri Snytkine <cms@lampcms.com>
 * @copyright  2005-2012 (or current year) Dmitri Snytkine
 * @license    http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * @link       http://www.lampcms.com   Lampcms.com project
 * @version    Release: 0.2.45
 *
 *
 */


namespace Lampcms;

/**
 * Class responsible for adding/updating
 * a per-user tags counter collection
 *
 * This collection will be used for displaying
 * per - user tag stats on user profile page
 * can also be used for data mining but for that
 * a separate script has to run periodically like
 * once a day and maintain $tag => users array
 *
 * @author Dmitri Snytkine
 *
 */
class UserTags extends LampcmsObject
{

    const USER_TAGS = 'USER_TAGS';

    /**
     * @todo pass only Mongo\DB
     * and not Registry
     *
     * do not extend LampcmsObject
     * set own $Mongo instance variable
     * add own factory method
     *
     * @param Registry $Registry
     */
    public function __construct(Registry $Registry)
    {
        $this->Registry = $Registry;
    }


    /**
     * Add array of tags to per-user tags collection
     *
     * @param int $uid
     * @param Question $Question
     * @return \Lampcms\UserTags
     */
    public function addTags($uid, \Lampcms\Question $Question)
    {
        /**
         * Questions that come from external APIs may not
         * have any user associated with it, uid is 0 or null then
         * in this case we should not attempt to
         * insert user tags, just return
         */
        if (empty($uid)) {

            return;
        }

        $uid = (int)$uid;

        $aTags = $Question['a_tags'];

        /**
         * Extra precaution to filter out
         * empty values
         */
        $aTags = \array_filter($aTags);


        $coll = $this->Registry->Mongo->getCollection(self::USER_TAGS);
        $a = $coll->findOne(array('_id' => $uid));

        /**
         * If there is not record of tags for this user yet,
         * then we will make array with $tag => 1
         * and will use that,
         *
         * otherwise loop over existing array of tags,
         * increasing count, then sorting in descending
         * order by count and same to collection
         */
        if (empty($a)) {
            $aTemp = \array_count_values($aTags);


        } else {
            $aTemp = $a['tags'];
            foreach ($aTags as $t) {
                /**
                 * Under no circumstances should we allow
                 * an empty value to make its way into this array
                 * since this array is indexed and empty values
                 * in index may cause very bad times in Mongo.
                 */
                if (empty($t)) {
                    //e('Strange, there is an empty value of the tag in array: '.print_r($aTags, 1));

                    continue;
                }

                if (array_key_exists($t, $aTemp)) {
                    $aTemp[$t] += 1;
                } else {
                    $aTemp[$t] = 1;
                }
            }

            \arsort($aTemp, SORT_NUMERIC);
        }

        d('Saving (updating) User tags');
        $coll->save(array('_id' => $uid, 'tags' => $aTemp, 'i_count' => count($aTemp)), array('fsync' => true));
        d('Updated User Tags');

        return $this;
    }


    /**
     *
     * When question is marked deleted OR is retaged
     * we must update the user tags to account
     * for all tags in the removed question
     *
     * @param Question $Question
     * @param null     $uid
     *
     * @return \Lampcms\UserTags
     */
    public function removeTags(Question $Question, $uid = null)
    {

        /**
         * If question is deleted
         * then dont update anything
         *
         */
        $uid = ($uid) ? (int)$uid : $Question->getOwnerId();


        $aTags = $Question['a_tags'];


        /**
         * Extra precaution to filter out
         * empty values
         */
        $aTags = \array_filter($aTags);

        $coll = $this->Registry->Mongo->getCollection(self::USER_TAGS);
        $a = $coll->findOne(array('_id' => $uid));

        if (empty($a) || empty($a['tags'])) {


            return $this;
        }

        $aUserTags = $a['tags'];

        foreach ($aTags as $t) {
            if (array_key_exists($t, $aUserTags)) {
                $aUserTags[$t] -= 1;
                if ($aUserTags[$t] < 1) {
                    $aUserTags[$t] = false;
                }
            }
        }

        /**
         * Remove empty values
         * in case a count of tags has reached 0
         * in the process.
         * Otherwise bad times will happen as an empty value
         * will make its way into Mongo Index since this
         * array is indexed. Mongo does not allow empty values
         * in index and will throw exception or error
         *
         */
        $aUserTags = \array_filter($aUserTags);

        \arsort($aUserTags, SORT_NUMERIC);

        $coll->save(array('_id' => $uid, 'tags' => $aUserTags, 'i_count' => count($aUserTags)), array('fsync' => true));

        return $this;
    }

}
