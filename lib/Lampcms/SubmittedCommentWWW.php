<?php
/**
 *
 * License, TERMS and CONDITIONS
 *
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * Please read the license here : http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * ATTRIBUTION REQUIRED
 * 4. All web pages generated by the use of this software, or at least
 *       the page that lists the recent questions (usually home page) must include
 *    a link to the http://www.lampcms.com and text of the link must indicate that
 *    the website\'s Questions/Answers functionality is powered by lampcms.com
 *    An example of acceptable link would be "Powered by <a href="http://www.lampcms.com">LampCMS</a>"
 *    The location of the link is not important, it can be in the footer of the page
 *    but it must not be hidden by style attributes
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE FREEBSD PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This product includes GeoLite data created by MaxMind,
 *  available from http://www.maxmind.com/
 *
 *
 * @author     Dmitri Snytkine <cms@lampcms.com>
 * @copyright  2005-2012 (or current year) Dmitri Snytkine
 * @license    http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * @link       http://www.lampcms.com   Lampcms.com project
 * @version    Release: 0.2.45
 *
 *
 */


namespace Lampcms;

/**
 * Class represents a Comment submitted via Browser
 * has methods to get body, ip, parent Resource and other
 * properties of the comment
 *
 * @author Dmitri Snytkine
 *
 */
class SubmittedCommentWWW implements \Lampcms\Interfaces\SubmittedComment
{
    /**
     * The one comment is a resource
     * of type COMMENT
     * This identifying string is stored
     * in RESOURCE collection
     *
     * @var string
     */
    const RESOURCE_TYPE = 'COMMENT';

    /**
     * Registry Object
     *
     * @var object of type Registry
     */
    protected $Registry;


    /**
     * ID of ANSWER or QUESTIONS resource
     * (NOT COMMENT RESOURCE)
     *
     *
     * @var int
     */
    protected $resourceID;

    /**
     *
     * Resource for which this comment
     * is made
     * @var object either Question or Answer
     */
    protected $Resource;

    /**
     * Name of Mongo Collection where
     * this comment will be stored
     * It's either QUESTIONS or ANSWERS
     * depending on type of $Resource
     *
     * @var string
     */
    protected $collection;


    /**
     * Constructor
     *
     * @param \Lampcms\Registry  $Registry
     * @param \Lampcms\Interfaces\LampcmsResource $Resource
     */
    public function __construct(\Lampcms\Registry $Registry, \Lampcms\Interfaces\LampcmsResource $Resource = null)
    {
        $this->Registry = $Registry;
        if ($Resource) {
            $this->setResource($Resource);
            $this->getResourceCollection();
        }
    }


    /**
     * Set the value of $this->Resource
     * and also the value of $this->collection
     *
     * @param \Lampcms\Interfaces\LampcmsResource $Resource
     */
    public function setResource(\Lampcms\Interfaces\LampcmsResource $Resource = null)
    {
        if (null !== $Resource) {
            $this->Resource = $Resource;
            $this->getResourceCollection();
        } else {
            $this->findCollection();
            $this->initResource();
        }
    }


    protected function getResourceCollection()
    {

        if (!isset($this->collection)) {
            $this->getResource();

            if ($this->Resource instanceof \Lampcms\Answer) {
                $this->collection = 'ANSWERS';
            } else {
                $this->collection = 'QUESTIONS';
            }
        }

        return $this->collection;
    }


    protected function findCollection()
    {

        $commentID = (Request::isPost()) ? $this->Registry->Request->get('commentid', 'i', 0) : $this->Registry->Router->getNumber(1);
        if (0 !== $commentID) {
            $this->getCollectionByCommentId($commentID);
        } else {
            $this->findCollectionByResourceId($this->Registry->Request['rid']);
        }

        return $this;
    }


    /**
     * Create object of type Question or Answer
     *
     * @throws Exception if unable to find Question or Answer by resourceID
     * @return object $this
     */
    protected function initResource()
    {

        $coll = $this->Registry->Mongo->getCollection($this->collection);
        $a = $coll->findOne(array('_id' => $this->resourceID));
        d('a: ' . print_r($a, 1));

        if (empty($a)) {

            throw new \Lampcms\Exception('Item not found');
        }

        $class = ('QUESTIONS' === $this->collection) ? '\\Lampcms\\Question' : '\\Lampcms\\Answer';

        $this->Resource = new $class($this->Registry, $a);


        return $this;
    }


    /**
     * Find name of the collection
     * this comment will belong to
     *
     * @param int $resID id of question or answer
     * @throws \Lampcms\Exception
     *
     * @return object $this
     */
    protected function findCollectionByResourceId($resID)
    {
        $a = $this->Registry->Mongo->RESOURCE->findOne(array('_id' => $resID));
        d('a: ' . print_r($a, 1));
        if (empty($a)) {
            throw new \Lampcms\Exception('RESOURCE NOT FOUND by id ' . $resID);
        }

        if (!empty($a['res_type']) && ('ANSWER' === $a['res_type'])) {
            $this->collection = 'ANSWERS';
        } else {
            $this->collection = 'QUESTIONS';
        }

        $this->resourceID = $resID;

        return $this;
    }


    /**
     * Get object of type User of user
     * who posted the answer
     *
     * @return object of type User
     */
    public function getUserObject()
    {

        return $this->Registry->Viewer;
    }


    /**
     * @return object of type Utf8String
     */
    public function getBody()
    {

        $body = $this->Registry->Request->getUTF8('com_body')->htmlentities()->mmd2Html()->wordWrap(70, "\n", true);
        d('$body: ' . $body);

        return $body;
    }


    /**
     * @return string ip address from where
     *
     * the answer was submitted
     */
    public function getIP()
    {

        return Request::getIP();
    }


    /**
     * @throws DevException
     * @return int id of question for which
     * this comment is submitted
     */
    public function getQuestionId()
    {
        if (!$this->Resource) {
            $this->setResource();
        }

        if ($this->Resource instanceof \Lampcms\Question) {
            $ret = $this->Resource->getResourceId();
        } elseif ($this->Resource instanceof \Lampcms\Answer) {
            $ret = $this->Resource['i_qid'];
        } else {
            throw new DevException('Resource is not Question and Not Answer ' . get_class($this->Resource));
        }

        if (empty($ret)) {
            throw new DevException('Something is Wrong: QuestionID cannot is empty');
        }

        return (int)$ret;
    }


    /**
     *
     * Get parent id - the id of
     * comment for which this is a reply
     *
     * @return int 0 means no parent
     */
    public function getParentId()
    {

        return $this->Registry->Request->get('parentid', 'i', 0);
    }


    /**
     * Get GeoIP data
     *
     * @return associative array
     */
    public function getExtraData()
    {
        return $this->Registry->Geo->Location->data;
    }

    /**
     * Returns type of resource
     * the type of resource is a string stored in RESOURCE
     * collection as res_type
     *
     * @return string
     */
    public function getResourceTypeId()
    {

        return self::RESOURCE_TYPE;
    }


    /**
     * Returns id of user (USERS.id)
     * who owns the resource
     * Which is usually the user who created it
     * but doest not have to be.
     * It is up to the individual class
     * to decide who owns the resource.
     *
     * @return int
     */
    public function getOwnerId()
    {

        return $this->getUserObject()->getUid();
    }

    /**
     * Get unix timestamp of
     * when resource was last modified
     * This includes any type of change made to a
     * resource, including when new comments were added
     * or new rating added ,etc.
     *
     * It's up to the implementer to decide what changes
     * are significant enough to be considered modified
     * but usually the on update CURRENT TIMESTAMP
     * is a very good way to mark resource as modified
     *
     * @return int last modified time in unix timestamp
     *
     */
    public function getLastModified()
    {

        return time();
    }

    /**
     * Every resource when deleted actually has
     * a 'deleted' timestamp set
     * to the time when it was deleted.
     * This way we consider a resource as deleted
     * but can also find and possibly show
     * the date/time when resource was deleted
     * and also have the option to 'undelete'
     * by just switching the 'deleted' column value
     * back to 0
     *
     * @return int
     * 0 means not deleted or unix timestamp of when resource
     * was marked as deleted
     */
    public function getDeletedTime()
    {

        return 0;
    }


    /**
     * Updates last modified timestamp
     *
     */
    public function touch()
    {

    }


    protected function getCollectionByCommentId($commentid)
    {
        $a = $this->Registry->Mongo->COMMENTS->findOne(array('_id' => $commentid));
        d('a: ' . print_r($a, 1));
        if (empty($a) || empty($a['coll'])) {
            throw new \Lampcms\Exception('@@Resource not found by id@@ ' . $commentid);
        }

        $this->collection = $a['coll'];
        $this->resourceID = $a['i_res'];

        return $this;
    }


    /**
     * In case of edit, the comment id is passed
     * in the form as the 'rid' value
     * otherwise we don't have the id yet if this is a new
     * comment being submitted and we
     * generate one right now.
     *
     * (non-PHPdoc)
     * @see Lampcms\Interfaces.Resource::getResourceId()
     */
    public function getResourceId()
    {

        $id = $this->getCommentId();
        if (!empty($id)) {
            d('got commentid: ' . $id);

            return $id;
        }

        return $this->Registry->Resource->create(self::RESOURCE_TYPE);
    }


    protected function getCommentId(){
        return (Request::isPost()) ? $this->Registry->Request->get('commentid', 'i', 0) : $this->Registry->Router->getNumber(1);
    }


    public function getResource()
    {
        if (!$this->Resource) {
            d('resource not yet set... setting one now');
            $this->setResource();
        }

        return $this->Resource;
    }


    public function getCollectionName()
    {

        return $this->getResourceCollection();
    }


    /**
     * Get name of app used for submitting
     * this question
     * @return string
     */
    public function getApp()
    {
        return 'web';
    }


    /**
     * Get id of app used for submitting
     * this question
     * @return null
     */
    public function getAppId()
    {
        return null;
    }


    /**
     * Get id of link to app used for submitting
     * this question
     *
     * @return null
     */
    public function getAppLink()
    {
        $name = $this->getApp();
        $id = $this->getAppId();

        return (!empty($id) && !empty($name)) ? \sprintf('<a href="{_WEB_ROOT_}/{_viewapp_}/%s" rel="nofollow" target="_blank">%s</a>', $id, $name) : null;
    }
}
