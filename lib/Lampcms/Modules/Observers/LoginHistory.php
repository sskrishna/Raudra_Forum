<?php
/**
 *
 * License, TERMS and CONDITIONS
 *
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * Please read the license here : http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * ATTRIBUTION REQUIRED
 * 4. All web pages generated by the use of this software, or at least
 *       the page that lists the recent questions (usually home page) must include
 *    a link to the http://www.lampcms.com and text of the link must indicate that
 *    the website\'s Questions/Answers functionality is powered by lampcms.com
 *    An example of acceptable link would be "Powered by <a href="http://www.lampcms.com">LampCMS</a>"
 *    The location of the link is not important, it can be in the footer of the page
 *    but it must not be hidden by style attributes
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE FREEBSD PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This product includes GeoLite data created by MaxMind,
 *  available from http://www.maxmind.com/
 *
 *
 * @author     Dmitri Snytkine <cms@lampcms.com>
 * @copyright  2005-2012 (or current year) Dmitri Snytkine
 * @license    http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * @link       http://www.lampcms.com   Lampcms.com project
 * @version    Release: 0.2.45
 *
 *
 */


namespace Lampcms\Modules\Observers;

use Lampcms\Request;

/**
 * Class for recording
 * time and place and type of authentication
 * of each new login action.
 * For example a login by username/password is a "password" login,
 * login with facebook is a "facebook" login
 * This will build a history of when, how and from where
 * user logged in to the site.
 *
 * @author Dmitri Snytkine
 *
 */
class LoginHistory extends \Lampcms\Event\Observer
{

    protected $loginMethod;

    public function main()
    {

        d('get event: ' . $this->eventName);

        switch ( $this->eventName ) {
            case 'onUserLogin':
                $this->loginMethod = 'password';
                break;

            case 'onFacebookLogin':
                $this->loginMethod = 'facebook';
                break;

            case 'onLinkedinLogin':
                $this->loginMethod = 'linkedin';
                break;

            case 'onCookieLogin':
                $this->loginMethod = 'cookie';
                break;

            case 'onTwitterLogin':
                $this->loginMethod = 'twitter';
                break;
        }

        if (isset($this->loginMethod)) {
            $this->run();
        }
    }


    /**
     * Update LOGIN_LOG collection
     *
     */
    protected function run()
    {
        $Viewer = $this->Registry->Viewer;
        if (!is_object($Viewer)) {
            d('Could not get Viewer object');
            return;
        }

        $ip  = Request::getIP();
        $uid = $Viewer->getUid();

        d('uid: ' . $uid);
        if ($uid > 0) {

            $aData = array(
                'ip'           => $ip,
                'i_uid'        => $uid,
                'i_ts'         => time(),
                'ua'           => Request::getUserAgent(),
                'login_method' => $this->loginMethod
            );

            $Mongo = $this->Registry->Mongo->getDb();
            //$Geo 	= $this->Registry->Geo;

            $func = function() use ($aData, $Mongo)
            {

                //$aGeo = $Geo->getLocation($aData['ip'])->toArray();
                //$aData = $aData + $aGeo;

                $coll = $Mongo->LOGIN_LOG;
                $coll->ensureIndex(array('i_uid' => 1));
                $coll->ensureIndex(array('ip' => 1));
                $coll->insert($aData);
            };

            \Lampcms\runLater($func);

        }

    }

}
