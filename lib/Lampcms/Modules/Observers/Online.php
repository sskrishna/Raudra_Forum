<?php
/**
 *
 * License, TERMS and CONDITIONS
 *
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * Please read the license here : http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * ATTRIBUTION REQUIRED
 * 4. All web pages generated by the use of this software, or at least
 *       the page that lists the recent questions (usually home page) must include
 *    a link to the http://www.lampcms.com and text of the link must indicate that
 *    the website\'s Questions/Answers functionality is powered by lampcms.com
 *    An example of acceptable link would be "Powered by <a href="http://www.lampcms.com">LampCMS</a>"
 *    The location of the link is not important, it can be in the footer of the page
 *    but it must not be hidden by style attributes
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE FREEBSD PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This product includes GeoLite data created by MaxMind,
 *  available from http://www.maxmind.com/
 *
 *
 * @author     Dmitri Snytkine <cms@lampcms.com>
 * @copyright  2005-2012 (or current year) Dmitri Snytkine
 * @license    http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * @link       http://www.lampcms.com   Lampcms.com project
 * @version    Release: 0.2.45
 *
 *
 */


namespace Lampcms\Modules\Observers;

use Lampcms\Request;

/**
 * Class to keep records
 * of users who are currently online
 * as well as their current location on
 * the site.
 *
 * @author Dmitri Snytkine
 *
 */
class Online extends \Lampcms\Event\Observer
{
    /**
     * Title of page currently being viewed
     *
     * @var string
     */
    protected $title = '';

    /**
     * Category of page being viewed
     * Currently we don't have support for categories
     * but this is going to be used in the future
     *
     * @var string
     */
    protected $category = '';

    /**
     * Keywords of page being viewed
     *
     * This is comma-separated list of keywords
     *
     * @var string
     */
    protected $keywords = '';

    public function main()
    {

        //d('get event: '.$this->eventName);
        //d('$_REQUEST: '.print_r($_REQUEST, 1));
        //d('SERVER: '.print_r($_SERVER, 1));
        $this->title = !empty($this->aInfo['title']) ? $this->aInfo['title'] : '';
        /**
         * This is for the future
         * when we have support for "category" concept
         * a page controller may setup the value of "category"
         * in the template and we may use it to record category
         * into 'ONLINE' collection.
         * This way we may should list of users that are currently
         * viewing items or doing anything in that category.
         *
         */
        $this->category = !empty($this->aInfo['category']) ? $this->aInfo['category'] : '';

        if ('onPageView' === $this->eventName) {

            $this->run();
        }
    }


    /**
     * Update ONLINE_USERS collection
     * @todo exit if useragent is of known Crawler
     *
     * @todo make logging guests online configurable option via Ini
     *
     */
    protected function run()
    {
        $Viewer = $this->Registry->Viewer;
        $ip = Request::getIP();
        $uid = $Viewer->getUid();
        d('uid: ' . $uid);

        $aData = array(
            'ip' => $ip,
            'i_ts' => time(),
            'ua' => Request::getUserAgent(),
            /* request_viewtags (for example) it could be translated with I18N to show what user is viewing*/
            'action' => 'request_' . $this->Registry->Request->get('a', 's', 'home'),
            /* REQUEST_URI could be used to make a link to that page */
            'uri' => $_SERVER['REQUEST_URI'],
            'title' => $this->title,
            'category' => $this->category,
            'a_kw' => (!empty($this->aInfo['keywords'])) ? explode(', ', $this->aInfo['keywords']) : array()
        );

        if ($uid > 0) {
            $aData['i_uid'] = $uid;
            $aData['username'] = $Viewer->getDisplayName();
            $aData['avtr'] = $Viewer->getAvatarSrc();
            $aData['profile'] = $Viewer->getProfileUrl();
            $aData['role'] = $Viewer->getRoleId();
            $aData['i_rep'] = $Viewer->getReputation();
        }

        $Mongo = $this->Registry->Mongo->getDb();
        $Geo = $this->Registry->Geo;


        $func = function() use ($aData, $Mongo, $Geo)
        {

            $aGeo = $Geo->getLocation($aData['ip'])->toArray();
            $aData = $aData + $aGeo;

            /**
             * Need unique index uid
             *
             */
            if (array_key_exists('i_uid', $aData)) {
                $coll = $Mongo->ONLINE;
                $coll->ensureIndex(array('i_uid' => 1), array('unique' => true));
                $coll->ensureIndex(array('i_ts' => 1));
                $coll->update(array('i_uid' => $aData['i_uid']), $aData, array('upsert' => true));
            } else {
                /**
                 * For guests the value of ip2long (int)
                 * will be used as uid
                 */
                $aData['i_uid'] = ip2long($aData['ip']);
                $coll = $Mongo->GUESTS;
                $coll->ensureIndex(array('i_uid' => 1), array('unique' => true));
                $coll->ensureIndex(array('i_ts' => 1));
                $coll->update(array('ip' => $aData['ip']), $aData, array('upsert' => true));
            }

            /**
             * Remove old records
             * Cleanup runs 10% of requests
             * removes records older than 24 hours
             */
            if (1 === rand(0, 10)) {
                $offset = time() - (60 * 60 * 24);
                $coll->remove(array('i_ts' => array('$lt' => $offset)));
            }
        };

        \Lampcms\runLater($func);

    }
}
