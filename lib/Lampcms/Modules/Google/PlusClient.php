<?php
/**
 *
 * License, TERMS and CONDITIONS
 *
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * Please read the license here : http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * ATTRIBUTION REQUIRED
 * 4. All web pages generated by the use of this software, or at least
 *       the page that lists the recent questions (usually home page) must include
 *    a link to the http://www.lampcms.com and text of the link must indicate that
 *    the website\'s Questions/Answers functionality is powered by lampcms.com
 *    An example of acceptable link would be "Powered by <a href="http://www.lampcms.com">LampCMS</a>"
 *    The location of the link is not important, it can be in the footer of the page
 *    but it must not be hidden by style attributes
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE FREEBSD PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This product includes GeoLite data created by MaxMind,
 *  available from http://www.maxmind.com/
 *
 *
 * @author     Dmitri Snytkine <cms@lampcms.com>
 * @copyright  2005-2012 (or current year) Dmitri Snytkine
 * @license    http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * @link       http://www.lampcms.com   Lampcms.com project
 * @version    Release: 0.2.45
 *
 *
 */


namespace Lampcms\Modules\Google;


class PlusClient
{

    protected $ApiClient;

    protected $Service;

    protected $configSection;

    protected $Registry;

    /**
     * Constructor
     *
     * @param \Lampcms\Registry $Registry
     */
    public function __old_construct(\Lampcms\Registry $Registry)
    {
        require_once 'src/apiClient.php';
        require_once 'src/contrib/apiPlusService.php';
        require_once 'src/contrib/apiOauth2Service.php';

        $config              = array('oauth2_client_id'     => '343075486220.apps.googleusercontent.com',
                                     'oauth2_client_secret' => '42pu4ztSU14fCZeuwdiTpyT7',
                                     'oauth2_redirect_uri'  => 'http://local.lampcms.com/www/index.php/connectgplus/');
        $this->Registry      = $Registry;
        $this->configSection = $Registry->Ini->getSection('GOOGLE_PLUS');

        $this->ApiClient = new \apiClient($config);
        $this->ApiClient->setApplicationName("Lampcms Support site");

        $scopes = array(
            'https://www.googleapis.com/auth/plus.me',
            'https://www.googleapis.com/auth/plus.moments.write');

        $scopes = array(
            'https://www.googleapis.com/auth/userinfo.profile',
            'https://www.googleapis.com/auth/userinfo.email'
        );

        $this->ApiClient->setScopes($scopes);
        $this->Service = new \apiPlusService($this->ApiClient);

    }


    public function __construct(\Lampcms\Registry $Registry)
    {
        require_once 'src/apiClient.php';
        require_once 'src/contrib/apiPlusService.php';
        require_once 'src/contrib/apiOauth2Service.php';

        $config              = array('oauth2_client_id'     => '343075486220.apps.googleusercontent.com',
                                     'oauth2_client_secret' => '42pu4ztSU14fCZeuwdiTpyT7',
                                     'oauth2_redirect_uri'  => 'http://local.lampcms.com/www/index.php/connectgplus/');
        $this->Registry      = $Registry;
        $this->configSection = $Registry->Ini->getSection('GOOGLE_PLUS');

        $this->ApiClient = new \apiClient($config);
        $this->ApiClient->setApplicationName("Lampcms Support site");

        $scopes = array(
            'https://www.googleapis.com/auth/plus.me',
            'https://www.googleapis.com/auth/plus.moments.write');

        $scopes = array(
            'https://www.googleapis.com/auth/userinfo.profile',
            'https://www.googleapis.com/auth/userinfo.email'
        );

        $this->ApiClient->setScopes($scopes);
        $this->Service = new \apiPlusService($this->ApiClient);

    }


    public function init()
    {
        echo ' ' . __LINE__ . ' ';

        $oauth2 = new \apiOauth2Service($this->ApiClient);
        if (isset($_GET['code'])) {
            $this->ApiClient->authenticate();
            $_SESSION['token'] = $this->ApiClient->getAccessToken();
            $redirect = 'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['PHP_SELF'];
            header('Location: ' . filter_var($redirect, FILTER_SANITIZE_URL));
        }

        if (isset($_SESSION['token'])) {
            $this->ApiClient->setAccessToken($_SESSION['token']);
        }

        if (isset($_REQUEST['logout'])) {
            unset($_SESSION['token']);
            $this->ApiClient->revokeToken();
        }

        if ($this->ApiClient->getAccessToken()) {
            $user = $oauth2->userinfo->get();

            // These fields are currently filtered through the PHP sanitize filters.
            // See http://www.php.net/manual/en/filter.filters.sanitize.php
            $email = filter_var($user['email'], FILTER_SANITIZE_EMAIL);
            $img = filter_var($user['picture'], FILTER_VALIDATE_URL);
            $personMarkup = "$email<div><img src='$img?sz=50'></div>";

            // The access token may have been updated lazily.
            $_SESSION['token'] = $this->ApiClient->getAccessToken();
        } else {
            $authUrl = $this->ApiClient->createAuthUrl();
        }



    }

    public function _init()
    {
        echo ' ' . __LINE__ . ' ';


        $this->ApiClient->authenticate();
        $token               = $this->ApiClient->getAccessToken();
        $this->ApiClient->setAccessToken($token);

        echo ' client after authenticate: ';
        var_dump($this->ApiClient);

        $me = $this->Service->people->get('me');


        echo "\n<br>me: ";
        var_dump($me);

        echo "\n<br>token";
        echo $token;

        exit;


    }


    public function getGooglePlusUser()
    {

    }

}
