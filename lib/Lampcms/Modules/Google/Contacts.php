<?php
/**
 *
 * License, TERMS and CONDITIONS
 *
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * Please read the license here : http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * ATTRIBUTION REQUIRED
 * 4. All web pages generated by the use of this software, or at least
 *       the page that lists the recent questions (usually home page) must include
 *    a link to the http://www.lampcms.com and text of the link must indicate that
 *    the website\'s Questions/Answers functionality is powered by lampcms.com
 *    An example of acceptable link would be "Powered by <a href="http://www.lampcms.com">LampCMS</a>"
 *    The location of the link is not important, it can be in the footer of the page
 *    but it must not be hidden by style attributes
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE FREEBSD PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This product includes GeoLite data created by MaxMind,
 *  available from http://www.maxmind.com/
 *
 *
 * @author     Dmitri Snytkine <cms@lampcms.com>
 * @copyright  2005-2012 (or current year) Dmitri Snytkine
 * @license    http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * @link       http://www.lampcms.com   Lampcms.com project
 * @version    Release: 0.2.45
 *
 *
 */


namespace Lampcms\Modules\Google;


/**
 * Class for working with Google Contacts
 * using Oauth2 authentication
 */
class Contacts
{

    /**
     * Template of the URL to call to get list of contacts
     *
     * @var string
     */
    const API_URL = 'https://www.google.com/m8/feeds/contacts/default/full?oauth_token=%s&max-results=%d';

    /**
     * @var \Lampcms\Mongo\DB object
     */
    protected $Mongo;

    /**
     * @var string xml received from API Contains contacts elements
     */
    protected $xml = '';

    /**
     * @var int value of _id of User
     */
    protected $uid;

    /**
     * @var \Lampcms\Curl object
     */
    protected $Curl;

    public function __construct(\Lampcms\Mongo\DB $Mongo, \Lampcms\Curl $Curl)
    {
        $this->Mongo = $Mongo;
        $this->Curl  = $Curl;
    }

    /**
     * Import contacts from Mongo
     * and save them to CONTACTS collection
     *
     * Under keys: emails and lc_name_hash
     *
     * @param int       $uid      user ID
     * @param string    $token    Oauth2 token
     *                            must have scope https://www.google.com/m8/feeds/
     *                            or import will fail
     * @param int       $limit    maximum contact to import (default 1000)
     */
    public function import($uid, $token, $limit = 1000)
    {
        $this->xml = null;
        $uri       = \sprintf(self::API_URL, $token, $limit);
        try {
            $Response  = $this->Curl->get($uri);
            $this->xml = $Response->getBody();

        } catch ( \Exception $e ) {
            if (function_exists('d')) {
                d('Unable to get contacts from Google API. Exception: ' . get_class($e) .
                    ' Message: ' . $e->getMessage() .
                    ' code ' . $e->getCode .
                    ' in ' . $e->getFile() .
                    ' line: ' . $e->getLine());
            }

        }

        $this->parseXml($uid);

    }


    protected function parseXml($uid)
    {
        if (empty($this->xml)) {
            if (function_exists('d')) {
                d('No xml to parse');
            }

            return;
        }

        $SX = new \SimpleXMLElement($this->xml);
        $SX->registerXPathNamespace('gd', 'http://schemas.google.com/g/2005');
        $SX->registerXPathNamespace('atom', 'http://www.w3.org/2005/Atom');

        $emails = array();
        $names = array();

        $elements = $SX->xpath('//gd:email');
        $titles  = $SX->xpath('//atom:entry/atom:title[normalize-space(text()) != ""]');

        if ($elements) {
            foreach ($elements as $item) {

                $address  = $item->attributes()->address;
                $address  = \mb_strtolower($address);
                $emails[] = $address;
            }
        }


        if (!empty($emails)) {

            $coll = $this->Mongo->EMAIL_CONTACTS;
            $coll->ensureIndex(array('i_uid' => 1), array('unique' => true));
            $coll->ensureIndex(array('emails' => 1));

            $coll->update(array('i_uid' => $uid), array('$addToSet' => array('emails' => array('$each' => $emails))), array('upsert' => true));
            unset($emails);
        }

        /**
         * @todo
         * unfinished. Names not yet added to any collections
         */
        if($titles){
            foreach($titles as $title){
                $name = (string)$title;
                $name = preg_replace('/[\s]{2,}/', ' ', $name);
                $name = preg_replace('/([,.]+)/', '', $name);

                $names[] = \mb_strtolower($name);
            }
        }

        // $coll->ensureIndex(array('lc_name_hash' => 1));
    }

}
