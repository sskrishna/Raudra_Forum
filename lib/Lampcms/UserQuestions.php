<?php
/**
 *
 * License, TERMS and CONDITIONS
 *
 * This software is licensed under the GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * Please read the license here : http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * ATTRIBUTION REQUIRED
 * 4. All web pages generated by the use of this software, or at least
 *       the page that lists the recent questions (usually home page) must include
 *    a link to the http://www.lampcms.com and text of the link must indicate that
 *    the website's Questions/Answers functionality is powered by lampcms.com
 *    An example of acceptable link would be "Powered by <a href="http://www.lampcms.com">LampCMS</a>"
 *    The location of the link is not important, it can be in the footer of the page
 *    but it must not be hidden by style attributes
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE FREEBSD PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This product includes GeoLite data created by MaxMind,
 *  available from http://www.maxmind.com/
 *
 *
 * @author     Dmitri Snytkine <cms@lampcms.com>
 * @copyright  2005-2012 (or current year) Dmitri Snytkine
 * @license    http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * @link       http://www.lampcms.com   Lampcms.com project
 * @version    Release: 0.2.45
 *
 *
 */


namespace Lampcms;

/**
 * Class for getting parsed html
 * of user questions block
 *
 * @author admin
 *
 */
class UserQuestions extends LampcmsObject
{

    /**
     *
     * Get parsed html of user questions div,
     * complete with pagination
     *
     * @todo there has to be an extra request param "tab" and ONLY if
     *       it equals to 'questions' then it would mean
     *       that sort and pagination is for this block because it could
     *       be for 'answer' block since they both come to the same controller
     *       OR just make separate controllers and then pagination and sorting
     *       will work ONLY with AJAX  and then just hide pagination from
     *       non-js browsers!
     *
     * @param Registry $Registry
     * @param User     $User
     *
     * @return string html of user questions
     */
    public static function get(Registry $Registry, User $User)
    {
        $perPage = $Registry->Ini->PROFILE_QUESTIONS_PER_PAGE;

        $uid = $User->getUid();
        if (0 === $uid) {
            d('not registered user');

            return '';
        }

        /**
         * @var string
         */
        $pagerLinks = '';
        /**
         * @var int
         */
        $pageID = $Registry->Router->getPageID();
        /**
         * @var array
         */
        $aUriMap = $Registry->Ini->getSection('URI_PARTS');


        //$mode = $Registry->Request->get('tab', 's', '');

        /**
         * sort order possible values:
         * recent, oldest, voted, updated, views
         *
         * default is oldest first
         *
         * $mode 'questions' means that user requested
         * either pagination or sorting specifically
         * for the User Questions
         * This is not necessarily an ajax request as pagination
         * will work without Ajax too.
         *
         * When there is no explicit 'questions' $mode
         * then we need to just get the cursor
         * with default sort and pageID, treating this
         * request as if it was for pageID 1 and sort=oldest
         */
        //if('q' === $mode){

        $cond = $Registry->Router->getSegment(3, 's', $aUriMap['SORT_RECENT']);
        d('$cond: ' . $cond);

        switch ( $cond ) {
            case $aUriMap['SORT_RECENT']:
                $sort      = array('i_ts' => -1);
                $pagerPath = '{_WEB_ROOT_}/{_userinfotab_}/q/' . $uid . '/{_SORT_RECENT_}';
                break;

            case $aUriMap['SORT_VOTED']:
                $sort      = array('i_votes' => -1);
                $pagerPath = '{_WEB_ROOT_}/{_userinfotab_}/q/' . $uid . '/{_SORT_VOTED_}';
                break;

            case $aUriMap['SORT_UPDATED']:
                $sort      = array('i_etag' => -1);
                $pagerPath = '{_WEB_ROOT_}/{_userinfotab_}/q/' . $uid . '/{_SORT_UPDATED_}';
                break;

            case $aUriMap['SORT_VIEWS']:
                $sort      = array('i_views' => -1);
                $pagerPath = '{_WEB_ROOT_}/{_userinfotab_}/q/' . $uid . '/{_SORT_VIEWS_}';
                break;

            default:
                $sort      = array('i_ts' => 1);
                $pagerPath = '{_WEB_ROOT_}/{_userinfotab_}/q/' . $uid . '/{_SORT_OLDEST_}';
                break;

        }
        //}

        $cursor = self::getCursor($Registry, $uid, $sort);
        $count  = $cursor->count(true);
        d('$count: ' . $count);

        /**
         * If this user does not have any questions then return
         * empty string
         */
        if (0 == $count) {
            d('no user questions');
            return '';
        }

        if ($count > $perPage || $pageID > 1) {

            $Paginator = Paginator::factory($Registry);

            $Paginator->paginate($cursor, $perPage,
                array('path'        => $pagerPath,
                      'currentPage' => $pageID));

            $pagerLinks = $Paginator->getLinks();
            d('links: ' . $pagerLinks);
        }


        $questions = \tplUquestions::loop($cursor);

        $vals = array(
            '{count}'      => $count,
            '{questions}'  => $questions,
            '{pagination}' => $pagerLinks);

        return \tplUserQuestions::parse($vals);
    }


    /**
     * @static
     * @param Registry $Registry
     * @param $uid
     * @param array $sort
     * @return object \MongoCursor
     */
    protected static function getCursor(Registry $Registry, $uid, array $sort)
    {

        $where = array('i_uid' => $uid);
        /**
         * Exclude deleted items unless viewer
         * is a moderator
         */
        if (!$Registry->Viewer->isModerator()) {
            $where['i_del_ts'] = null;
        }

        return $Registry->Mongo->QUESTIONS->find($where)->sort($sort);
    }

}
